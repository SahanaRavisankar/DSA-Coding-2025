// approach 1
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int max = 1;
        int[] dp = new int[n];
        Arrays.fill(dp, 1);

        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[j] < nums[i]){
                    dp[i] = Math.max(dp[i], dp[j] + 1);
                    max = Math.max(max, dp[i]);
                }
            }
        }

        return max;
    }
}


// approach 2
class Solution {
    public int lengthOfLIS(int[] nums) {
        int n = nums.length;
        int[][] dp = new int[n][n];
        for(int[] t : dp) Arrays.fill(t, -1);

        return solve(nums, -1, 0, n, dp);
    }

    int solve(int[] nums, int prev, int curr, int n, int[][] dp){
        if(curr >= n)
            return 0;

        if(prev != -1 && dp[prev][curr] != -1) return dp[prev][curr];
        int take = 0;
        
        if(prev == -1 || nums[prev] < nums[curr]){
            take = 1 + solve(nums, curr, curr + 1, n, dp);
        }
        
        int skip = solve(nums, prev, curr + 1, n, dp);

        int val = Math.max(take, skip);
        if(prev != -1) dp[prev][curr] = val;
        return val;
    }
}
