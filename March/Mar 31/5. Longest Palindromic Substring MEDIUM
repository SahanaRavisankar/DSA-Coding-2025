// approach 1
class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        int len = Integer.MIN_VALUE, st = 0;
        int[][] dp = new int[n + 1][n + 1];
        for(int[] t : dp) Arrays.fill(t, -1);

        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                if(check(s, i, j, dp)){
                    if(j - i + 1 > len) {
                        len = j - i + 1;
                        st = i;
                    }
                }
            }
        }

        return s.substring(st, st + len);
    }

    boolean check(String s, int i, int j, int[][] dp){
        if(i >= j) return true;

        if(dp[i][j] != -1)
            return dp[i][j] == 1;
        
        if(s.charAt(i) == s.charAt(j)){
            dp[i][j] = check(s, i + 1, j - 1, dp) ? 1 : 0;
            return dp[i][j] == 1;
        }

        dp[i][j] = 0;
        return false;
    }
}


// approach 2
class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        int len = 1, st = 0;
        boolean[][] dp = new boolean[n][n];
        for(boolean[] t : dp) Arrays.fill(t, false);
        for(int i=0; i<n; i++) dp[i][i] = true;

        for(int l = 2; l <= n; l++){
            for(int i = 0; l + i - 1 < n; i++){
                int j = l + i - 1;
                if(i == j) dp[i][j] = true;
                else if(l == 2 && s.charAt(i) == s.charAt(j)) {
                    dp[i][j] = true;
                    if(j - i + 1 > len) {
                        len = j - i + 1;
                        st = i;
                    }
                }
                else {
                    if(s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]) {
                        dp[i][j] = true;
                        if(j - i + 1 > len) {
                            len = j - i + 1;
                            st = i;
                        }
                    } else dp[i][j] = false;
                }
            }
        }

        return s.substring(st, st + len);
    }
}
