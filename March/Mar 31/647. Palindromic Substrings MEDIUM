// approach 1
class Solution {
    public int countSubstrings(String s) {
        int count = 0;
        int n = s.length();
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++) {
                if(check(s.substring(i, j + 1)))
                    count++;
            }
        }

        return count;
    }

    boolean check(String s) {
        StringBuilder temp = new StringBuilder();
        temp.append(s);
        return s.equals(temp.reverse().toString());
    }
}


// approach 2
class Solution {
    public int countSubstrings(String s) {
        int n = s.length();
        int count = 0;
        boolean[][] dp = new boolean[n + 1][n + 1];
        for(boolean[] b : dp) Arrays.fill(b, false);
        
        for(int l = 1; l <= n; l++) {
            for(int i = 0; i + l - 1 < n; i++) {
                int j = i + l - 1;
                if(i == j) dp[i][j] = true; // 1 length string
                else if(i + 1 == j) dp[i][j] = s.charAt(i) == s.charAt(j); // 2 length string
                else dp[i][j] = s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1];
                if(dp[i][j]) count++;
            }
        }
        
        return count;
    }
}
