// approach 1
class Solution {
    public int minDistance(String s1, String s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        int[][] dp = new int[n1][n2];
        for(int[] t : dp) Arrays.fill(t, -1);
        return solve(s1, s2, 0, 0, n1, n2, dp);
    }

    int solve(String s1, String s2, int i, int j, int n1, int n2, int[][] dp) {
        if(j == n2) return n1 - i;
        if(i == n1) return n2 - j;

        if(dp[i][j] != -1) return dp[i][j];

        if(s1.charAt(i) == s2.charAt(j)) return dp[i][j] = solve(s1, s2, i + 1, j + 1, n1, n2, dp);
        int insert = 1 + solve(s1, s2, i, j + 1, n1, n2, dp);
        int delete = 1 + solve(s1,s2, i + 1, j, n1, n2, dp);
        int replace = 1 + solve(s1,s2, i + 1, j + 1, n1, n2, dp);
        return dp[i][j] = Math.min(insert, Math.min(delete, replace));
    }
}


// approach 2
class Solution {
    public int minDistance(String s1, String s2) {
        int n1 = s1.length();
        int n2 = s2.length();
        int[][] dp = new int[n1 + 1][n2 + 1];

        for(int i = 0; i <= n1; i++) {
            for(int j = 0; j <= n2; j++){
                if(i == 0 || j == 0) {
                    dp[i][j] = i + j;
                } else if(s1.charAt(i - 1) == s2.charAt(j - 1)){
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = 1 + Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1]));
                }
            }
        }
        
        return dp[n1][n2];
    }
}
