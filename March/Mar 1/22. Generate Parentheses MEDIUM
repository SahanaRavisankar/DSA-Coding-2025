// approach 1
class Solution {

    List<String> res = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        res.clear();
        solve("", n);
        return res;
    }

    boolean isValid(String s){
        int count = 0;
        for(char ch : s.toCharArray()){
            if(ch == '(') count++;
            else {
                count--;
                if(count < 0) return false;
            }
        }
        return count == 0;
    }

    void solve(String curr, int n){
        if(curr.length() == 2*n){
            if(isValid(curr))
                res.add(curr);
            return;
        }

        curr += '(';
        solve(curr, n);
        curr = curr.substring(0, curr.length()-1);
        curr += ')';
        solve(curr, n);
        curr = curr.substring(0, curr.length()-1);
    }
}


// approach 2
class Solution {

    List<String> res = new ArrayList<>();

    public List<String> generateParenthesis(int n) {
        res.clear();
        solve("", 0, 0, n);
        return res;
    }

    boolean isValid(String s){
        int count = 0;
        for(char ch : s.toCharArray()){
            if(ch == '(') count++;
            else {
                count--;
                if(count < 0) return false;
            }
        }
        return count == 0;
    }

    void solve(String curr, int open, int close, int n){
        if(curr.length() == 2*n){
            if(isValid(curr))
                res.add(curr);
            return;
        }

        if(open > n || close > n || close > open) return;

        curr += '(';
        solve(curr, open + 1, close, n);
        curr = curr.substring(0, curr.length()-1);
        curr += ')';
        solve(curr, open, close + 1, n);
        curr = curr.substring(0, curr.length()-1);
    }
}
