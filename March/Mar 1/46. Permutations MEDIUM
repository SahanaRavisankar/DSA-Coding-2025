// approach 1
class Solution {

    List<List<Integer>> res = new ArrayList<>();
    Set<Integer> st = new HashSet<>();
    int n;

    public List<List<Integer>> permute(int[] nums) {
        res.clear();
        n = nums.length;
        List<Integer> temp = new ArrayList<>();
        solve(temp, nums);
        return res;
    }

    void solve(List<Integer> temp, int[] nums){
        if(temp.size() == n){
            res.add(new ArrayList<>(temp));
            return;
        }

        for(int i = 0; i < n; i++){
            if(!st.contains(nums[i])){
                temp.add(nums[i]);
                st.add(nums[i]);
                solve(temp, nums);
                st.remove(nums[i]);
                temp.remove(temp.size() - 1);
            }
        }
    }
}


// approach 2
class Solution {

    List<List<Integer>> res = new ArrayList<>();
    int n;

    public List<List<Integer>> permute(int[] nums) {
        res.clear();
        n = nums.length;
        solve(nums, 0);
        return res;
    }

    void swap(int[] arr, int i, int j){
        int t = arr[i];
        arr[i] = arr[j];
        arr[j] = t;
    }

    void solve(int[] nums, int idx){
        if(idx == n){
            List<Integer> temp = new ArrayList<>();
            for (int num : nums) {
                temp.add(num);
            }
            res.add(temp);
            return;
        }

        for(int i = idx; i < n; i++){
            swap(nums, i, idx);
            solve(nums, idx + 1);
            swap(nums, i, idx);
        }
    }
}
