// approach 1
class Solution {
    public int[] applyOperations(int[] nums) {
        int n = nums.length;
        for(int i = 0; i < n - 1; i++){
            if(nums[i] == nums[i + 1]){
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }

        int[] res = new int[n];
        Arrays.fill(res, 0);
        int k = 0, j = 0;
        while(j < n){
            if(nums[j] != 0){
                res[k] = nums[j];
                k++;
            }
            j++;
        }

        return res;
    }
}

// approach 2
class Solution {
    public int[] applyOperations(int[] nums) {
        int n = nums.length;
        for(int i = 0; i < n - 1; i++){
            if(nums[i] == nums[i + 1]){
                nums[i] *= 2;
                nums[i + 1] = 0;
            }
        }

        int i = 0, j = 0;
        while(i < n){
            if(nums[j] != 0 && nums[i] != 0){
                i++;
                j++;
            } else if (nums[j] == 0){
                while(i < n && nums[i] == 0)
                    i++;
                if(i < n) swap(nums, i, j);
                j++;
            }
        }

        while(j < n){
            nums[j] = 0;
            j++;
        }

        return nums;
    }

    void swap(int[] arr, int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}

// approach 3
class Solution {
    public int[] applyOperations(int[] nums) {
        int n = nums.length;
        int j = 0;

        for(int i = 0; i < n; i++){
            if(i < n - 1 && nums[i] == nums[i + 1] && nums[i] != 0){
                nums[i] *= 2;
                nums[i + 1] = 0;
            }

            if(nums[i] != 0){
                if(i != j){
                    swap(nums, i, j);
                }
                j++;
            }
        }

        return nums;
    }

    void swap(int[] arr, int i, int j){
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
}
