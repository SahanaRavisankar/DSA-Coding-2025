// approach 1
class Solution {

    List<List<Integer>> res = new ArrayList<>();
    int n;

    public List<List<Integer>> permuteUnique(int[] nums) {
        res.clear();
        n = nums.length;
        List<Integer> temp = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();

        for(int n : nums) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }

        solve(map, temp);
        return res;
    }

    void solve(Map<Integer, Integer> map, List<Integer> temp) {
        if(temp.size() == n){
            res.add(new ArrayList<>(temp));
            return;
        }

        for(Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if(entry.getValue() == 0) continue;
            temp.add(entry.getKey());
            map.put(entry.getKey(), entry.getValue() - 1);
            solve(map, temp);
            temp.remove(temp.size() - 1);
            map.put(entry.getKey(), entry.getValue() + 1);
        }
    }
}


// approach 2
class Solution {

    List<List<Integer>> res = new ArrayList<>();
    int n;

    public List<List<Integer>> permuteUnique(int[] nums) {
        res.clear();
        n = nums.length;
        List<Integer> temp = new ArrayList<>();

        for(int n : nums) {
            temp.add(n);
        }

        solve(temp, 0);
        return res;
    }

    void solve(List<Integer> temp, int idx) {
        if(idx == n){
            res.add(new ArrayList<>(temp));
            return;
        }

        Set<Integer> set = new HashSet<>();

        for(int i = idx; i < n; i++) {
            if(set.contains(temp.get(i))) continue;
            set.add(temp.get(i));
            swap(temp, i, idx);
            solve(temp, idx + 1);
            swap(temp, i, idx);
        }
    }

    void swap(List<Integer> list, int i, int j){
        int t = list.get(i);
        list.set(i, list.get(j));
        list.set(j, t);
    }
}
