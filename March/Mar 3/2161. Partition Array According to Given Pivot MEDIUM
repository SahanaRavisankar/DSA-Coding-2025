// approach 1 - 3 pass solution
class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int idx = 0;
        int[] res = new int[nums.length];
        for(int n : nums){
            if(n < pivot){
                res[idx] = n;
                idx++;
            }
        }
        
        for(int n : nums){
            if(n == pivot){
                res[idx] = n;
                idx++;
            }
        }
        
        for(int n : nums){
            if(n > pivot){
                res[idx] = n;
                idx++;
            }
        }

        return res;
    }
}


// approach 2
class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int idx = 0;
        ArrayList<Integer> less = new ArrayList<>();
        ArrayList<Integer> equal = new ArrayList<>();
        ArrayList<Integer> greater = new ArrayList<>();

        for(int n : nums){
            if(n < pivot){
                less.add(n);
            } else if(n == pivot){
                equal.add(n);
            } else {
                greater.add(n);
            }
        }
        
        less.addAll(equal);
        less.addAll(greater);

        return less.stream().mapToInt(i -> i).toArray();
    }
}


// approach 3
class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int idx = 0;
        int[] res = new int[nums.length];
        int less = 0;
        int equal = 0;
        for(int n : nums){
            if(n < pivot){
                less++;
            } else if(n == pivot){
                equal++;
            }
        }
        
        int i = 0, j = less, k = less + equal;
        for(int n : nums){
            if(n < pivot){
                res[i] = n;
                i++;
            } else if(n == pivot){
                res[j] = n;
                j++;
            } else {
                res[k] = n;
                k++;
            }
        }

        return res;
    }
}


// approach 4
class Solution {
    public int[] pivotArray(int[] nums, int pivot) {
        int n = nums.length;
        int[] res = new int[n];
        int i = 0, st = 0, j = n - 1, end = n - 1;

        while(i < n && j >= 0){
            if(nums[i] < pivot){
                res[st] = nums[i];
                st++;
            }

            if (nums[j] > pivot) {
                res[end] = nums[j];
                end--;
            }
            
            i++;
            j--;
        }

        while(st <= end){
            res[st] = pivot;
            st++;
        }

        return res;
    }
}
