// approach 1
class Solution {
    public int findCircleNum(int[][] mat) {
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        int n = mat.length;
        boolean[] vis = new boolean[n];
        Arrays.fill(vis, false);

        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(mat[i][j] == 1){
                    adj.computeIfAbsent(i, k -> new ArrayList<Integer>()).add(j);
                }
            }
        }

        int count = 0;

        for(int i = 0; i < n; i++){
            if(!vis[i]) {
                dfs(i, adj, vis);
                count++;
            }
        }

        return count;
    }

    void dfs(int u, Map<Integer, ArrayList<Integer>> adj, boolean[] vis){
        vis[u] = true;
        for(int v : adj.get(u)){
            if(!vis[v]){
                dfs(v, adj, vis);
            }
        }
    }
}


// approach 2
class Solution {
    public int findCircleNum(int[][] mat) {
        int n = mat.length;
        boolean[] vis = new boolean[n];
        Arrays.fill(vis, false);

        int count = 0;

        for(int i = 0; i < n; i++){
            if(!vis[i]) {
                dfs(i, mat, vis, n);
                count++;
            }
        }

        return count;
    }

    void dfs(int u, int[][] mat, boolean[] vis, int n){
        vis[u] = true;
        for(int v = 0; v < n; v++){
            if(!vis[v] && mat[u][v] == 1){
                dfs(v, mat, vis, n);
            }
        }
    }
}
