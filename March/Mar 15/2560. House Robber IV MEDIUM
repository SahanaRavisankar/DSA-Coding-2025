// approach 1 mle
class Solution {
    public int minCapability(int[] nums, int k) {
        int[][] dp = new int[nums.length + 1][k + 1];
        for(int[] t : dp) Arrays.fill(t, -1);
        return solve(nums, 0, k, dp);
    }

    int solve(int[] nums, int i, int k, int[][] dp){
        if(k == 0) return 0;
        //invalid case
        if(i >= nums.length) return Integer.MAX_VALUE;
        if(dp[i][k] != -1) return dp[i][k];
        int take = Math.max(nums[i], solve(nums, i + 2, k - 1, dp));
        int skip = solve(nums, i + 1, k, dp);
        return dp[i][k] = Math.min(take, skip);
    }
}

// approach 2
class Solution {
    public int minCapability(int[] nums, int k) {
        int l = nums[0];
        int r = nums[0];
        for(int n : nums){
            l = Math.min(l, n);
            r = Math.max(r, n);
        }
        int res = 0;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if(check(nums, k, mid)){
                res = mid;
                r = mid - 1;
            } else l = mid + 1;
        }

        return res;
    }

    boolean check(int[] nums, int k, int mid){
        for(int i = 0; i < nums.length; i++){
            if(nums[i] <= mid){
                k--;
                i++;
            }
        }

        return k <= 0;
    }
}
