// approach 1
class Solution {
    public long maxBalancedSubsequenceSum(int[] nums) {
        int max = Arrays.stream(nums).max().getAsInt();
        if(max <= 0) return max;
        int n = nums.length;
        Map<String, Long> map = new HashMap<>();
        return solve(nums, -1, 0, n, map);
    }

    long solve(int[] nums, int prev, int i, int n, Map<String, Long> map) {
        if(i >= nums.length) return 0;
        String key = String.valueOf(prev) + "_" + String.valueOf(i);
        if(map.containsKey(key)) return map.get(key);
        long take = 0;
        if(prev == -1 || nums[i] - i >= nums[prev] - prev) {
            take = nums[i] + solve(nums, i, i + 1, n, map);
        }
        long skip = solve(nums, prev, i + 1, n, map);
        map.put(key, Math.max(take, skip));
        return map.get(key);
    }
}


// approach 2
class Solution {
    public long maxBalancedSubsequenceSum(int[] nums) {
        int n = nums.length;
        int maxel = Arrays.stream(nums).max().getAsInt();
        long[] dp = new long[n];
        for(int i = 0; i < n; i++){
            dp[i] = nums[i];
        }
        long max = Integer.MIN_VALUE;
        for(int i = 0; i < n; i++){
            for(int j = 0; j < i; j++){
                if(nums[i] - i >= nums[j] - j){
                    dp[i] = Math.max(dp[i], dp[j] + nums[i]);
                    max = Math.max(max, dp[i]);
                }
            }
        }
        return Math.max(max, maxel);
    }
}


// approach 3
