// approach 1
class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        ArrayList<int[]> list = new ArrayList<>();
        int n1 = nums1.length;
        int n2 = nums2.length;
        int i = 0, j = 0;

        while(i < n1 && j < n2){
            if(nums1[i][0] == nums2[j][0]){
                list.add(new int[]{nums1[i][0], nums1[i][1] + nums2[j][1]});
                i++;
                j++;
            } else if (nums1[i][0] < nums2[j][0]) {
                list.add(new int[]{nums1[i][0], nums1[i][1]});
                i++;
            } else {
                list.add(new int[]{nums2[j][0], nums2[j][1]});
                j++;
            }
        }

        while(i < n1){
            list.add(new int[]{nums1[i][0], nums1[i][1]});
            i++;
        }

        while(j < n2){
            list.add(new int[]{nums2[j][0], nums2[j][1]});
            j++;
        }

        int[][] res = new int[list.size()][2];
        for(int k = 0; k < list.size(); k++){
            res[k][0] = list.get(k)[0];
            res[k][1] = list.get(k)[1];
        }

        return res;
    }
}


// approach 2
class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        Map<Integer, Integer> map = new HashMap<>();

        for(int[] n1 : nums1){
            map.put(n1[0], map.getOrDefault(n1[0], 0) + n1[1]);
        }
        
        for(int[] n2 : nums2){
            map.put(n2[0], map.getOrDefault(n2[0], 0) + n2[1]);
        }

        List<Map.Entry<Integer, Integer>> list = new ArrayList<>(map.entrySet());
        list.sort(Map.Entry.comparingByKey());

        int[][] res = new int[map.size()][2];
        int k = 0;
        for(Map.Entry<Integer, Integer> entry : list){
            res[k][0] = entry.getKey();
            res[k][1] = entry.getValue();
            k++;
        }

        return res;
    }
}


// approach 3
class Solution {
    public int[][] mergeArrays(int[][] nums1, int[][] nums2) {
        TreeMap<Integer, Integer> map = new TreeMap<>();

        for(int[] n1 : nums1){
            map.put(n1[0], map.getOrDefault(n1[0], 0) + n1[1]);
        }
        
        for(int[] n2 : nums2){
            map.put(n2[0], map.getOrDefault(n2[0], 0) + n2[1]);
        }

        int[][] res = new int[map.size()][2];
        int k = 0;
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            res[k][0] = entry.getKey();
            res[k][1] = entry.getValue();
            k++;
        }

        return res;
    }
}
