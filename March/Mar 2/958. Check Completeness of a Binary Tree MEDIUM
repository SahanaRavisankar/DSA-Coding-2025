// approach 1
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        Queue<TreeNode> que = new LinkedList<>();
        que.offer(root);
        boolean past = false;

        while(!que.isEmpty()){
            TreeNode node = que.poll();
            if(node == null)
                past = true;
            else {
                if(past)
                    return false;
                que.offer(node.left);
                que.offer(node.right);
            }
        }

        return true;
    }
}


// approach 2
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        int cnt = countNode(root);

        return dfs(root, 1, cnt);
    }

    boolean dfs(TreeNode root, int i, int cnt){
        if(root == null)
            return true;
        if(i > cnt)
            return false;
        return dfs(root.right, 2 * i + 1, cnt) && dfs(root.left, 2 * i, cnt);
    }

    int countNode(TreeNode root){
        if(root == null)
            return 0;

        return 1 + countNode(root.right) + countNode(root.left);
    }
}
