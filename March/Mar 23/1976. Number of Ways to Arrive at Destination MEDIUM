class Solution {

    int MOD = 1_000_000_007;

    public int countPaths(int n, int[][] roads) {
        Map<Integer, List<int[]>> adj = new HashMap<>();
        
        for(int[] road : roads) {
            int u = road[0];
            int v = road[1];
            int t = road[2];
            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(new int[]{v, t});
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(new int[]{u, t});
        }

        PriorityQueue<long[]> pq = new PriorityQueue<>(Comparator.comparingLong(a -> a[0]));
        
        long[] res = new long[n];
        Arrays.fill(res, Long.MAX_VALUE);
        
        int[] count = new int[n];
        Arrays.fill(count, 0);
        
        res[0] = 0;
        count[0] = 1;

        pq.offer(new long[]{0, 0});

        while(!pq.isEmpty()) {
            long[] curr = pq.poll();
            long currtime = curr[0];
            int currnode = (int) curr[1];

            if(currtime > res[currnode]) continue;

            for(int[] vec : adj.getOrDefault(currnode, new ArrayList<>())){
                int ngbr = vec[0];
                int time = vec[1];
                
                if(currtime + time < res[ngbr]){
                    res[ngbr] = currtime + time;
                    pq.offer(new long[]{res[ngbr], ngbr});
                    count[ngbr] = count[currnode];
                } else if(currtime + time == res[ngbr]) {
                    count[ngbr] = (count[ngbr] + count[currnode]) % MOD;
                }
            }
        }

        return count[n - 1];
    }
}
