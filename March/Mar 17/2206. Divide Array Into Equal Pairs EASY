// approach 1
class Solution {
    public boolean divideArray(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n : nums){
            map.put(n, map.getOrDefault(n, 0) + 1);
        }

        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if(entry.getValue() % 2 == 1) return false;
        }

        return true;
    }
}

// approach 2
class Solution {
    public boolean divideArray(int[] nums) {
        Set<Integer> set = new HashSet<>();
        for(int n : nums){
            if(set.contains(n)){
                set.remove(n);
            } else {
                set.add(n);
            }
        }

        return set.isEmpty();
    }
}

// approach 3
class Solution {
    public boolean divideArray(int[] nums) {
        boolean[] vis = new boolean[501];
        Arrays.fill(vis, true);
        for(int n : nums){
            vis[n] = !vis[n];
        }

        for(boolean b : vis){
            if(!b) return false;
        }

        return true;
    }
}

// approach 4
class Solution {
    public boolean divideArray(int[] nums) {
        Arrays.sort(nums);
        for(int i = 1; i < nums.length; i += 2){
            if(nums[i] != nums[i - 1]){
                return false;
            }
        }

        return true;
    }
}

// approach 5
class Solution {
    public boolean divideArray(int[] nums) {
        Arrays.sort(nums);
        for(int i = 1; i < nums.length; i += 2){
            int chk = nums[i - 1] ^ nums[i];
            if(chk != 0){
                return false;
            }
        }

        return true;
    }
}
