// approach 1
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        int sum = 0;
        return solve(root, sum, targetSum);
    }

    boolean solve(TreeNode root, int sum, int target){
        if(root == null)
            return false;

        sum += root.val;
        if(root.left == null && root.right == null){
            return sum == target;
        }

        boolean left = solve(root.left, sum, target);
        boolean right = solve(root.right, sum, target);

        return left || right;
    }
}


// approach 2
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
        if(root == null)
            return false;
        if(root.val == targetSum && root.left == null && root.right == null)
            return true;
        return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val);
    }
}
