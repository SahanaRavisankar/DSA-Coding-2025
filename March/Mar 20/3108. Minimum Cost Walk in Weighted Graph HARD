class Solution {

    int find(int[] parent, int x){
        if(parent[x] == x)
            return x;
        return parent[x] = find(parent, parent[x]);
    }

    void union(int u, int v, int[] parent){
        parent[v] = u;
    }

    public int[] minimumCost(int n, int[][] edges, int[][] query) {
        int[] parent = new int[n];
        for(int i = 0; i < n; i++)
            parent[i] = i;

        int[] cost = new int[n];
        Arrays.fill(cost, -1);

        for(int[] ed : edges){
            int u = ed[0];
            int v = ed[1];
            int w = ed[2];
            int uparent = find(parent, u);
            int vparent = find(parent, v);
            
            if(uparent != vparent){
                cost[uparent] &= cost[vparent];
                union(uparent, vparent, parent);
            }

            cost[uparent] &= w;
        }

        int[] res = new int[query.length];

        for(int i = 0; i < query.length; i++){
            int u = query[i][0];
            int v = query[i][1];
            int uparent = find(parent, u);
            int vparent = find(parent, v);

            if(u == v) res[i] = 0;
            else if(uparent != vparent) res[i] = -1;
            else res[i] = cost[uparent];
        }

        return res;
    }
}
