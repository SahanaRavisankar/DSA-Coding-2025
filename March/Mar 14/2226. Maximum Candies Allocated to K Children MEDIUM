// approach 1
class Solution {
    public int maximumCandies(int[] candies, long k) {
        int max = 0;
        for(int i : candies) max = Math.max(max, i);

        for(int i = max; i >= 1; i--){
            long cnt = 0;
            for(int j = 0; j < candies.length; j++){
                cnt += candies[j] / i;
            }
            if(cnt >= k) return i;
        }
        return 0;
    }
}


// approach 2
class Solution {
    public int maximumCandies(int[] candies, long k) {
        int n = candies.length;
        int max = 0, l = 1;
        for(int i : candies) max = Math.max(max, i);
        int r = max;

        int res = 0;
        while(l <= r){
            int mid = l + (r - l) / 2;
            if(check(candies, mid, k, n)) {
                res = mid;
                l = mid + 1;
            } else r = mid - 1;
        }

        return res;
    }

    boolean check(int[] candies, int mid, long k, int n){
        long cnt = 0;
        for(int j = 0; j < n; j++){
            k -= candies[j] / mid;
            if(k <= 0) return true;
        }
        return k <= 0;
    }
}
