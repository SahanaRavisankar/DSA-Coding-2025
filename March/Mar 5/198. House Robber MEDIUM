// approach 1.1
class Solution {
    public int rob(int[] nums) {
        return solve(nums, 0, nums.length);
    }

    int solve(int[] nums, int i, int n){
        if(i >= n)
            return 0;

        int take = nums[i] + solve(nums, i + 2, n);
        int skip = solve(nums, i + 1, n);
        
        return Math.max(take, skip);
    }
}

// approach 1.2
class Solution {
    public int rob(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return solve(nums, 0, nums.length, dp);
    }

    int solve(int[] nums, int i, int n, int[] dp){
        if(i >= n)
            return 0;

        if(dp[i] != -1)
            return dp[i];

        int take = nums[i] + solve(nums, i + 2, n, dp);
        int skip = solve(nums, i + 1, n, dp);
        
        return dp[i] = Math.max(take, skip);
    }
}

// approach 2
class Solution {
    public int rob(int[] nums) {
        int n = nums.length;
        if(n == 1)
            return nums[0];
        if(n == 2)
            return Math.max(nums[0], nums[1]);

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = nums[0];
        dp[2] = Math.max(nums[0], nums[1]);

        for(int i = 3; i <= n; i++){
            dp[i] = Math.max(nums[i - 1] + dp[i - 2], dp[i - 1]);
        }

        return dp[n];
    }
}
