class Solution {
    public boolean validateBinaryTreeNodes(int n, int[] leftChild, int[] rightChild) {
        Map<Integer, Integer> childtoparent = new HashMap<>();
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        for(int i = 0; i < n; i++){
            int leftc = leftChild[i];
            int rightc = rightChild[i];
            if(leftc != -1){
                adj.computeIfAbsent(i, k -> new ArrayList<>()).add(leftc);
                if(childtoparent.containsKey(leftc)) return false;
                childtoparent.put(leftc, i);
            }
            if(rightc != -1){
                adj.computeIfAbsent(i, k -> new ArrayList<>()).add(rightc);
                if(childtoparent.containsKey(rightc)) return false;
                childtoparent.put(rightc, i);
            }
        }

        int root = -1;
        for(int i = 0; i < n; i++){
            if(!childtoparent.containsKey(i)){
                if(root != -1) return false;
                root = i;
            }
        }

        if(root == -1) return false;

        Queue<Integer> que = new LinkedList<>();
        que.offer(root);
        ArrayList<Integer> list = new ArrayList<>();
        boolean[] vis = new boolean[n];
        vis[root] = true;

        while(!que.isEmpty()){
            int u = que.poll();
            list.add(u);
            for(int v : adj.getOrDefault(u, new ArrayList<>())){
                if(!vis[v]) {
                    que.offer(v);
                    vis[v] = true;
                }
            }
        }

        return list.size() == n;
    }
}
