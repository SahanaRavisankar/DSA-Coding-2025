// approach 1
class Solution {
    public int[] findMissingAndRepeatedValues(int[][] grid) {
        Set<Integer> set = new HashSet<>();
        int num1 = 0;
        int num2 = 0;
        for(int[] i:grid){
            for(int j:i){
                if(set.contains(j)) num1 = j;
                set.add(j);
            }
        }

        for(int i = 1; i <= grid.length * grid.length; i++){
            if(!set.contains(i)){
                num2 = i;
                break;
            }
        }

        return new int[]{num1, num2};
    }
}


// approach 2
class Solution {
    public int[] findMissingAndRepeatedValues(int[][] grid) {
        long gridsum = 0, sum = 0, gridsq = 0, sumsq = 0;
        long k = grid.length;
        for (int i = 0; i < k; i++) {
            for (int j = 0; j < k; j++) {
                gridsum += grid[i][j];
                gridsq += (grid[i][j] * grid[i][j]);
            }
        }
        
        long n = k * k;
        sum = n * (n + 1) / 2;
        sumsq = n * (n + 1) * (2 * n + 1) / 6;
        long diff = gridsum - sum;
        long diffsq = gridsq - sumsq;

        int a = (int) ((diffsq / diff) + diff) / 2;
        int b = (int) ((diffsq / diff) - diff) / 2;
        return new int[] { a, b };
    }
}
