// approach 1
class Solution {
    public boolean canJump(int[] nums) {
        return solve(nums, nums.length, 0);
    }

    boolean solve(int[] nums, int n, int idx){
        if(idx == n - 1)
            return true;

        if(idx >= n)
            return false;

        for(int i = 1; i <= nums[idx]; i++){
            if(solve(nums, n, idx + i))
                return true;
        }

        return false;
    }
}

// approach 2
class Solution {
    public boolean canJump(int[] nums) {
        int[] dp = new int[nums.length];
        Arrays.fill(dp, -1);
        return solve(nums, nums.length, 0, dp);
    }

    boolean solve(int[] nums, int n, int idx, int[] dp){
        if(idx == n - 1)
            return true;

        if(idx >= n)
            return false;

        if(dp[idx] != -1)
            return dp[idx] == 1;

        for(int i = 1; i <= nums[idx]; i++){
            if(solve(nums, n, idx + i, dp)){
                dp[idx] = 1;
                return true;
            }
        }

        dp[idx] = 0;
        return false;
    }
}

// approach 3
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        boolean[] dp = new boolean[n];
        Arrays.fill(dp, false);
        dp[0] = true;

        for(int i = 1; i < n; i++){
            for(int j = i - 1; j >= 0; j--){
                if(dp[j] && j + nums[j] >= i){
                    dp[i] = true;
                    break;
                }
            }
        }

        return dp[n - 1];
    }
}

// approach 4
class Solution {
    public boolean canJump(int[] nums) {
        int n = nums.length;
        int max = nums[0];

        for(int i = 1; i < n - 1; i++){
            if(i > max)
                return false;
            max = Math.max(i + nums[i], max);
        }

        return max >= n - 1;
    }
}
