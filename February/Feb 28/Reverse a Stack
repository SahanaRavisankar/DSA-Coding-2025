// approach 1
class Solution
{ 
    static void reverse(Stack<Integer> s)
    {
        if(s.isEmpty())
            return;
            
        int top = s.pop();
        reverse(s);
        Stack<Integer> temp = new Stack<>();
        
        while(!s.isEmpty()) {
            temp.push(s.pop());
        }
        
        s.push(top);
        while(!temp.isEmpty()) {
            s.push(temp.pop());
        }
    }
}


// approach 2
class Solution
{ 
    static void reverse(Stack<Integer> s)
    {
        if(s.isEmpty())
            return;
            
        int top = s.pop();
        reverse(s);
        insert(s, top);
    }
    
    
    static void insert(Stack<Integer> s, int el)
    {
        if(s.isEmpty())
        {
            s.push(el);
            return;
        }
        
        int top = s.pop();
        insert(s, el);
        s.push(top);
    }
}
