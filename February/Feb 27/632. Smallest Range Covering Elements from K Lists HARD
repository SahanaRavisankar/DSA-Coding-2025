// approach 1
class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int k = nums.size();
        if(k == 1) return new int[]{nums.get(0).get(0), nums.get(0).get(0)};
        ArrayList<Integer> list = new ArrayList<>();

        for(List<Integer> l : nums) for(int n : l) list.add(n); // add in 1 list

        Collections.sort(list); // sort it
        int n = list.size();
        int[] ans = new int[2];
        ans[0] = Integer.MIN_VALUE/2;
        ans[1] = Integer.MAX_VALUE/2;

        for(int i = 0; i < n; i++){
            List<Integer> temp = new ArrayList<>();
            for(int j = i + 1; j < n; j++){
                int n1 = list.get(i);
                int n2 = list.get(j);
                boolean flag = true;
                for(int a = 0; a < k; a++){
                    boolean bool = false;
                    for(int b = 0; b < nums.get(a).size(); b++){
                        if(nums.get(a).get(b) <= n2 && nums.get(a).get(b) >= n1) bool = true;
                    }
                    flag = flag && bool;
                }
                if(flag && ans[1] - ans[0] > n2 - n1){
                    ans[0] = n1;
                    ans[1] = n2;
                }
            }
        }

        return ans;
    }
}


// approach 2
class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int[] ans = new int[2];
        ans[0] = Integer.MIN_VALUE / 2;
        ans[1] = Integer.MAX_VALUE / 2;

        int k = nums.size();
        int[] vec = new int[k];
        Arrays.fill(vec, 0);

        while(true){
            int min = Integer.MAX_VALUE;
            int max = Integer.MIN_VALUE;
            int minidx = 0;

            for(int i = 0; i < k; i++){
                int listidx = i;
                int elidx = vec[i];
                int el = nums.get(listidx).get(elidx);

                if(el < min){
                    min = el;
                    minidx = listidx;
                }
                max = Math.max(max, el);
            }

            if(max - min < ans[1] - ans[0]){
                ans[0] = min;
                ans[1] = max;
            }

            int next = vec[minidx] + 1;
            if(next >= nums.get(minidx).size()) break;

            vec[minidx] = next;
        }

        return ans;
    }
}


// approach 3
class Solution {
    public int[] smallestRange(List<List<Integer>> nums) {
        int[] ans = new int[2];
        ans[0] = (int)-1e6;
        ans[1] = (int)1e6;

        int k = nums.size();
        int max = Integer.MIN_VALUE;
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        for(int i = 0; i < k; i++){
            pq.offer(new int[]{nums.get(i).get(0), i, 0});
            max = Math.max(max, nums.get(i).get(0));
        }

        while(!pq.isEmpty()){
            int[] curr = pq.poll();
            int min = curr[0];
            int listidx = curr[1];
            int idx = curr[2];

            if(max - min < ans[1] - ans[0]){
                ans[0] = min;
                ans[1] = max;
            }

            if(idx + 1 < nums.get(listidx).size()){
                int next = nums.get(listidx).get(idx + 1);
                pq.offer(new int[]{next, listidx, idx + 1});
                max = Math.max(max, next);
            } else break;
        }

        return ans;
    }
}
