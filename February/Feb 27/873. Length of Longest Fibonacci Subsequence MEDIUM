// approach 1 recursion
class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            map.put(arr[i], i);
        }

        int res = 0;
        for(int j = 1; j < n; j++){
            for(int k = j + 1; k < n; k++){
                int len = solve(j, k, arr, map);
                if (len >= 3)
                    res = Math.max(len, res);
            }
        }

        return res;
    }

    int solve(int j, int k, int[] arr, Map<Integer, Integer> map){
        int target = arr[k] - arr[j];
        if(map.containsKey(target) && map.get(target) < j){
            int i = map.get(target);
            return solve(i, j, arr, map) + 1;
        }
        return 2;
    }
}


// approach 2 memo
class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            map.put(arr[i], i);
        }

        int[][] dp = new int[n][n];
        for(int[] t : dp)
            Arrays.fill(t, -1);

        int res = 0;
        for(int j = 1; j < n; j++){
            for(int k = j + 1; k < n; k++){
                int len = solve(j, k, arr, map, dp);
                if (len >= 3)
                    res = Math.max(len, res);
            }
        }

        return res;
    }

    int solve(int j, int k, int[] arr, Map<Integer, Integer> map, int[][] dp){
        if(dp[j][k] != -1)
            return dp[j][k];

        int target = arr[k] - arr[j];
        if(map.containsKey(target) && map.get(target) < j){
            int i = map.get(target);
            return dp[j][k] = solve(i, j, arr, map, dp) + 1;
        }
        return dp[j][k] = 2;
    }
}


// approach 3
class Solution {
    public int lenLongestFibSubseq(int[] arr) {
        int n = arr.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i < n; i++){
            map.put(arr[i], i);
        }

        int[][] dp = new int[n][n];
        for(int[] t : dp)
            Arrays.fill(t, 2);

        int res = 0;
        for(int j = 1; j < n; j++){
            for(int k = j + 1; k < n; k++){
                int find = arr[k] - arr[j];
                
                if (map.containsKey(find) && map.get(find) < j){
                    int i = map.get(find);
                    dp[j][k] = dp[i][j] + 1;
                }

                res = Math.max(res, dp[j][k]);
            }
        }

        return res >= 3 ? res : 0;
    }
}
