// approach 1
class Solution {

    class Pair {
        int first;
        int second;
        
        Pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }

    public long findScore(int[] nums) {
        long res = 0;
        int n = nums.length;
        Pair[] pair = new Pair[n];

        for(int i = 0; i < n; i++) {
            pair[i] = new Pair(nums[i], i);
        }

        Arrays.sort(pair, new Comparator<>() {
            @Override
            public int compare(Pair p1, Pair p2){
                if(p1.first == p2.first){
                    return Integer.compare(p1.second, p2.second);
                }

                return Integer.compare(p1.first, p2.first);
            }
        });

        boolean[] vis = new boolean[n];
        Arrays.fill(vis, false);

        for(int i = 0; i < n; i++) {
            Pair p = pair[i];
            if(!vis[p.second]) {
                res += p.first;
                vis[p.second] = true;
                if(p.second - 1 >= 0)
                    vis[p.second - 1] = true;
                
                if(p.second + 1 < n)
                    vis[p.second + 1] = true;
            }
        }

        return res;
    }
}


// approach 2
class Solution {

    class Pair {
        int first;
        int second;
        
        Pair(int first, int second){
            this.first = first;
            this.second = second;
        }
    }

    public long findScore(int[] nums) {
        long res = 0;
        int n = nums.length;
        PriorityQueue<Pair> pq = new PriorityQueue<>(new Comparator<Pair>() {
            @Override
            public int compare(Pair p1, Pair p2){
                if(p1.first == p2.first){
                    return Integer.compare(p1.second, p2.second);
                }

                return Integer.compare(p1.first, p2.first);
            }
        });

        for(int i = 0; i < n; i++){
            pq.offer(new Pair(nums[i], i));
        }

        boolean[] vis = new boolean[n];
        Arrays.fill(vis, false);

        while(!pq.isEmpty()) {
            Pair p = pq.poll();
            if(!vis[p.second]) {
                res += p.first;
                vis[p.second] = true;
                if(p.second - 1 >= 0)
                    vis[p.second - 1] = true;
                
                if(p.second + 1 < n)
                    vis[p.second + 1] = true;
            }
        }

        return res;
    }
}
