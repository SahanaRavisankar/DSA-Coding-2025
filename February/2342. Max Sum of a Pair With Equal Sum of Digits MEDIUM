// appraoch 1
class Solution {
    public int maximumSum(int[] nums) {
        int max = -1;
        int n = nums.length;
        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                if(sumDigit(nums[i]) == sumDigit(nums[j]))
                    max = Math.max(max, nums[i] + nums[j]);
            }
        }
        return max;
    }

    int sumDigit(int n){
        int sum = 0;
        while(n>0){
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }
}


// appraoch 2
class Solution {
    public int maximumSum(int[] nums) {
        int max = -1;
        int n = nums.length;
        Map<Integer, PriorityQueue<Integer>> map = new HashMap<>();

        for(int i : nums){
            map.computeIfAbsent(sumDigit(i), k -> new PriorityQueue<Integer>(Collections.reverseOrder())).offer(i);
        }
        //System.out.println(map);

        for(Map.Entry<Integer, PriorityQueue<Integer>> entry : map.entrySet()) {
            int x = 2;
            int sum = 0;
            PriorityQueue<Integer> pq = entry.getValue();
            while(!pq.isEmpty() && x>0){
                sum += pq.poll();
                x--;
            }
            if(x == 0) max = Math.max(max, sum);
        }

        return max;
    }

    int sumDigit(int n){
        int sum = 0;
        while(n>0){
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }
}


// approach 3
class Solution {
    public int maximumSum(int[] nums) {
        int max = -1;
        int n = nums.length;

        int[] arr = new int[82];
        
        for(int i = 0; i<n; i++) {
            int sum = sumDigit(nums[i]);
            if(arr[sum] != 0)
                max = Math.max(max, arr[sum] + nums[i]);
            arr[sum] = Math.max(arr[sum], nums[i]);
        }

        return max;
    }

    int sumDigit(int n){
        int sum = 0;
        while(n>0){
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }
}


// approach 4
class Solution {
    public int maximumSum(int[] nums) {
        int max = -1;
        int n = nums.length;
        ArrayList<int[]> list = new ArrayList<>();
        
        for(int i = 0; i<n; i++) {
            list.add(new int[]{sumDigit(nums[i]), nums[i]});
        }

        Collections.sort(list, (a, b) -> {
            if (a[0] == b[0]) {
                return Integer.compare(a[1], b[1]);
            }
            return Integer.compare(a[0], b[0]);
        });

        for(int i=1; i<n; i++){
            if(list.get(i)[0] == list.get(i-1)[0]) max = Math.max(max, list.get(i)[1] + list.get(i-1)[1]);
        }

        return max;
    }

    int sumDigit(int n){
        int sum = 0;
        while(n>0){
            sum += n % 10;
            n /= 10;
        }
        return sum;
    }
}
