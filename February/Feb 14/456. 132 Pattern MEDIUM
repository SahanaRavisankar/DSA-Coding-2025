// approach 1 brute force
class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        for(int i=0;i<n;i++){
            for(int j = i+1; j<n; j++){
                if(nums[i] < nums[j]){
                    for(int k=j+1; k<n; k++){
                        if(nums[i] < nums[k] && nums[k] < nums[j]) return true;
                    }
                }
            }
        }
        return false;
    }
}

// approach 2 better brute force
class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        int numi = nums[0];
        for(int j = 1; j<n; j++){
            numi = Math.min(numi, nums[j]);
            for(int k = j+1; k<n; k++){
                if(numi < nums[k] && nums[k] < nums[j]) return true;
            }
        }
        return false;
    }
}

// approach 3
class Solution {
    public boolean find132pattern(int[] nums) {
        int n = nums.length;
        int n3 = Integer.MIN_VALUE;

        Stack<Integer> stk = new Stack<>();

        for(int i = n - 1; i >= 0; i--) {
            if(nums[i] < n3) return true;
            while(!stk.isEmpty() && stk.peek() < nums[i]) n3 = stk.pop();
            stk.push(nums[i]);
        }
        
        return false;
    }
}
