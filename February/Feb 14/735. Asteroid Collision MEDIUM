// approach 1 using stack
class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> st = new Stack<>();
        for(int ast : asteroids) {
            while(!st.isEmpty() && st.peek() > 0 && ast < 0) {
                if(ast + st.peek() < 0) st.pop();
                else if(ast + st.peek() > 0) ast = 0;
                else {
                    ast = 0;
                    st.pop();
                }
            }
            
            if(ast != 0) st.push(ast);
        }

        int n = st.size();
        if(n == 0) return new int[]{};

        int[] res = new int[n];
        n--;
        while(!st.isEmpty()) {
            res[n] = st.pop();
            n--;
        }

        return res;
    }
}


// approach 2
class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        ArrayList<Integer> st = new ArrayList<>();
        for(int ast : asteroids) {
            while(st.size() != 0 && st.get(st.size() - 1) > 0 && ast < 0) {
                if(ast + st.get(st.size() - 1) < 0) st.remove(st.size() - 1);
                else if(ast + st.get(st.size() - 1) > 0) ast = 0;
                else {
                    ast = 0;
                    st.remove(st.size() - 1);
                }
            }
            
            if(ast != 0) st.add(ast);
        }

        int[] res = new int[st.size()];
        for(int i=0; i<st.size(); i++){
            res[i] = st.get(i);
        }

        return res;
    }
}
