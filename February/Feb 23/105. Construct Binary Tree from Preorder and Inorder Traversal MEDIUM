// approach 1
class Solution {
    int idx;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        idx = 0;
        return solve(preorder, inorder, 0, preorder.length - 1);
    }

    TreeNode solve(int[] preorder, int[] inorder, int st, int end){
        if(st > end) return null;
        int val = preorder[idx];
        int i = st;

        for(; i <= end; i++){
            if(inorder[i] == val) break;
        }

        idx++;
        TreeNode root = new TreeNode(val);

        root.left = solve(preorder, inorder, st, i - 1);
        root.right = solve(preorder, inorder, i + 1, end);

        return root;
    }
}


/ approach 2 used map
class Solution {
    int idx;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        idx = 0;
        Map<Integer, Integer> map = new HashMap<>();
        for(int  i = 0; i < preorder.length; i++){
            map.put(inorder[i], i);
        }

        return solve(preorder, inorder, 0, preorder.length - 1, map);
    }

    TreeNode solve(int[] preorder, int[] inorder, int st, int end, Map<Integer, Integer> map){
        if(st > end) return null;
        int val = preorder[idx];
        int i = map.get(val);

        idx++;
        TreeNode root = new TreeNode(val);

        root.left = solve(preorder, inorder, st, i - 1, map);
        root.right = solve(preorder, inorder, i + 1, end, map);

        return root;
    }
}
