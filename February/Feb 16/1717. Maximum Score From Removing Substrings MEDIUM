// approach 1
class Solution {
    public int maximumGain(String s, int x, int y) {
        int n = s.length();
        String s1 = new String();
        String s2 = new String();

        if(x > y) {
            s1 = solve(s, 'a', 'b');
            s2 = solve(s1, 'b', 'a');
        } else {
            s1 = solve(s, 'b', 'a');
            s2 = solve(s1, 'a', 'b');
        }

        int n1 = s1.length();
        int n2 = s2.length();

        return (((n - n1) / 2) * Math.max(x, y)) + (((n1 - n2) / 2) * Math.min(x, y));
    }

    String solve(String s, char c1, char c2) {
        Stack<Character> st = new Stack<>();

        for(char ch : s.toCharArray()) {
            if(!st.isEmpty() && st.peek() == c1 && ch == c2) st.pop();
            else st.push(ch);
        }

        String stStr = st.stream().map(k -> k.toString()).collect(Collectors.joining(""));
        
        return stStr;
    }
}


// approach 2
class Solution {
    public int maximumGain(String s, int x, int y) {
        int n = s.length();
        String s1 = new String();
        String s2 = new String();

        if(x > y) {
            s1 = solve(s, "ab");
            s2 = solve(s1, "ba");
        } else {
            s1 = solve(s, "ba");
            s2 = solve(s1, "ab");
        }

        int n1 = s1.length();
        int n2 = s2.length();

        return (((n - n1) / 2) * Math.max(x, y)) + (((n1 - n2) / 2) * Math.min(x, y));
    }

    String solve(String s, String m) {
        StringBuilder str = new StringBuilder();
        int j = 0;
        for(int i = 0; i < s.length(); i++) {
            str.append(s.charAt(i));
            j++;
            if(j > 1 && str.charAt(j-2) == m.charAt(0) && str.charAt(j-1) == m.charAt(1)){
                str.delete(j-2, j);
                j -= 2;
            }
        }

        return str.toString();
    }
}
