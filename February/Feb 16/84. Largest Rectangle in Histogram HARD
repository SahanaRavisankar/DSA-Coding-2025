class Solution {

    int[] get_nsl(int[] arr, int n) {
        int[] nsl = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i = 0; i < n; i++) {
            if(st.isEmpty()) nsl[i] = -1;
            else {
                while(!st.isEmpty() && arr[st.peek()] >= arr[i])
                    st.pop();
            }
            if(st.isEmpty()) nsl[i] = -1;
            else nsl[i] = st.peek();

            st.push(i);
        }

        return nsl;
    }
    
    int[] get_nsr(int[] arr, int n) {
        int[] nsr = new int[n];
        Stack<Integer> st = new Stack<>();
        for(int i = n - 1; i >= 0; i--) {
            if(st.isEmpty()) nsr[i] = n;
            else {
                while(!st.isEmpty() && arr[st.peek()] >= arr[i])
                    st.pop();
            }
            if(st.isEmpty()) nsr[i] = n;
            else nsr[i] = st.peek();

            st.push(i);
        }

        return nsr;
    }

    public int largestRectangleArea(int[] ht) {
        int n = ht.length;
        int[] nsl = get_nsl(ht, n);
        int[] nsr = get_nsr(ht, n);
        int[] width = new int[n];
        int maxArea = 0;
        for(int i = 0; i < n; i++) {
            width[i] = nsr[i] - nsl[i] - 1;
        }

        for(int i = 0; i < n; i++) {
            int area = width[i] * ht[i];
            maxArea = Math.max(maxArea, area);
        }

        return maxArea;
    }
}
