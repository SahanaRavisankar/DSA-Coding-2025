class Solution {
    public int[] constructDistancedSequence(int n) {
        int size = 2 * n - 1;
        int[] res = new int[size];
        boolean[] used = new boolean[n+1];
        Arrays.fill(used, false);
        Arrays.fill(res, -1);

        solve(0, n, res, used);

        return res;
    }

    boolean solve(int i, int n, int[] res, boolean[] used){
        if(i >= 2*n - 1) return true;

        if(res[i] != -1){
            return solve(i+1, n, res, used);
        }

        for(int num = n; num>=1; num--){
            if(used[num]) continue;

            used[num] = true;
            res[i] = num;
            
            if(num == 1){
                if(solve(i + 1, n, res, used))
                    return true;
            } else{
                int j = res[i] + i;

                if(j<2*n-1 && res[j] == -1){
                    res[j] = num;
                    if(solve(i+1, n, res, used))
                        return true;
                    res[j] = -1;
                }
            }
            used[num] = false;
            res[i] = -1;
        }
        return false;
    }
}
