// approach 1
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck);
        
        int n = deck.length;
        int[] res = new int[n];
        Arrays.fill(res, 0);
        
        boolean skip = false;
        int i = 0, j = 0;

        while(i < n){
            if(res[j] == 0){
                if(!skip){
                    res[j] = deck[i];
                    i++;
                }
                skip = !skip;
            }
            j = (j + 1) % n;
        }

        return res;
    }
}


// approach 2
class Solution {
    public int[] deckRevealedIncreasing(int[] deck) {
        Arrays.sort(deck);
        Queue<Integer> q = new LinkedList<>();
        int n = deck.length;
        int[] res = new int[n];
        Arrays.fill(res, 0);
        
        for(int i = 0; i < n; i++){
            q.add(i);
        }

        for(int i = 0; i < n; i++){
            int del = q.remove();
            res[del] = deck[i];
            if(q.size() > 0) q.add(q.remove());
        }

        return res;
    }
}
