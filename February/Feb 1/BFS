class Solution {
    
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> map) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        int n = map.size();
        for(int i=0; i<n; i++){
            for(int j:map.get(i)){
                adj.computeIfAbsent(i, k -> new ArrayList<Integer>()).add(j);
            }
        }
        
        ArrayList<Integer> res = new ArrayList<>();
        boolean[] vis = new boolean[n];
        Arrays.fill(vis, false);
        bfs(adj, 0, vis, res);
        return res;
    }
    
    void bfs(Map<Integer, List<Integer>> adj, int u, boolean[] vis, ArrayList<Integer> res){
        Queue<Integer> que = new LinkedList<>();
        que.offer(u);
        vis[u] = true;
        res.add(u);
        while(!que.isEmpty()){
            u = que.poll();
            for(int j:adj.getOrDefault(u, new ArrayList<>())){
                if(!vis[j]){
                    que.offer(j);
                    vis[j] = true;
                    res.add(j);
                }
            }
        }
    }
}
