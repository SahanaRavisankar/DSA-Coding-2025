// approach 1
class Solution {
    public int lastStoneWeight(int[] stones) {
        ArrayList<Integer> list = new ArrayList<>();
        for(int i : stones) list.add(i);
        while(list.size() > 1){
            Collections.sort(list);

            int a = list.get(list.size() - 1);
            list.remove(list.size() - 1);
            
            int b = list.get(list.size() - 1);
            list.remove(list.size() - 1);
            
            list.add(Math.abs(a - b));
        }

        return list.get(0);
    }
}

// approach 2
class Solution {
    public int lastStoneWeight(int[] stones) {
        PriorityQueue<Integer> list = new PriorityQueue<>(Collections.reverseOrder());
        for(int i : stones) list.add(i);

        while(list.size() > 1){
            int a = list.poll();
            int b = list.poll();
            list.offer(Math.abs(a - b));
        }

        return list.poll();
    }
}
