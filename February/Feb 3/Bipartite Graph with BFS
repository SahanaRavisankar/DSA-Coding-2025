class Solution {
    public boolean isBipartite(ArrayList<ArrayList<Integer>> adj) {
        int n = adj.size();
        int[] color = new int[n];
        Arrays.fill(color, -1);
        for(int i=0; i<n; i++){
            if(color[i] == -1){
                if(!bfs(adj, i, color, 1)) return false;
            }
        }
        return true;
    }
    
    public static boolean bfs(ArrayList<ArrayList<Integer>> adj, int curr, int[] color, int currcol){
        color[curr] = currcol;
        Queue<Integer> que = new LinkedList<>();
        que.offer(curr);
        while(!que.isEmpty()){
            int u = que.poll();
            for(int v:adj.get(u)){
                if(color[v]==color[u]) return false;
                if(color[v] == -1){
                    que.offer(v);
                    color[v] = 1 - color[u];
                }
            }
        }
        return true;
    }
}
