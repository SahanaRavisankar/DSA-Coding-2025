// approach 1
class Solution {
    public int minimumDeletions(String s) {
        Stack<Character> st = new Stack<>();
        int cnt = 0;

        for(char ch:s.toCharArray()){
            if(!st.isEmpty() && st.peek() == 'b' && ch == 'a'){
                cnt++;
                st.pop();
            } else st.push(ch);
        }

        return cnt;
    }
}


// approach 2 precomputing
class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int[] a = new int[n];
        int[] b = new int[n];

        b[0] = (s.charAt(0) == 'b') ? 1 : 0;
        
        for(int i = 1; i<n; i++){
            if(s.charAt(i) == 'b'){
                b[i] += b[i-1] + 1;
            } else {
                b[i] += b[i-1];
            }
        }
        
        a[n-1] = (s.charAt(n-1) == 'a') ? 1 : 0;

        for(int i = n-2; i>=0; i--){
            if(s.charAt(i) == 'a'){
                a[i] += a[i+1] + 1;
            } else {
                a[i] += a[i+1];
            }
        }

        int cnt = Integer.MAX_VALUE;
        for(int i = 0; i<n; i++){
            cnt = Math.min(cnt, a[i] + b[i] - 1);
        }

        return cnt;
    }
}


// approach 3
class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int[] a = new int[n];
        int cntb = 0;
        int cnta = 0;

        for(int i = n-1; i>=0; i--){
            a[i] = cnta;
            if(s.charAt(i) == 'a'){
                cnta++;
            }
        }

        int cnt = Integer.MAX_VALUE;
        for(int i = 0; i<n; i++){
            cnt = Math.min(cnt, a[i] + cntb);
            if(s.charAt(i) == 'b')
                cntb++;
        }

        return cnt;
    }
}


// approach 4
class Solution {
    public int minimumDeletions(String s) {
        int n = s.length();
        int[] a = new int[n];
        int cntb = 0;
        int cnta = 0;

        for(int i = 0; i<n; i++){
            if(s.charAt(i) == 'a'){
                cnta++;
            }
        }

        int cnt = Integer.MAX_VALUE;
        for(int i = 0; i<n; i++){
            if(s.charAt(i) == 'a')
                cnta--;
            cnt = Math.min(cnt, cnta + cntb);
            if(s.charAt(i) == 'b') {
                cntb++;
            }
        }

        return cnt;
    }
}
