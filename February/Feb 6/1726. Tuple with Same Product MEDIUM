// approach 1 - O(n^4) super brute force
class Solution {
    public int tupleSameProduct(int[] nums) {
        int cnt = 0;
        int n = nums.length;
        for(int i = 0; i<n; i++){
            for(int j = 0; j<n; j++){
                for(int k = 0; k<n; k++){
                    for(int l = 0; l<n; l++){
                        int p1 = nums[i]*nums[j];
                        int p2 = nums[k]*nums[l];
                        if(p1 == p2 && i!=j && k!= l && i!=k && i!=l && j!=k && j!=l) cnt++;
                    }
                }
            }
        }
        return cnt;
    }
}

// approach 2 mody brute force
class Solution {
    public int tupleSameProduct(int[] nums) {
        int cnt = 0;
        int n = nums.length;
        Arrays.sort(nums);
        for(int i = 0; i<n; i++){
            for(int j = n-1; j>i; j--){
                for(int k = i+1; k<j; k++){
                    for(int l = j-1; l>k; l--){
                        int p1 = nums[i]*nums[j];
                        int p2 = nums[k]*nums[l];
                        if(p1==p2) cnt++;
                    }
                }
            }
        }
        return cnt*8;
    }
}

// approach 3 O(n^3)
class Solution {
    public int tupleSameProduct(int[] nums) {
        int cnt = 0;
        int n = nums.length;
        Arrays.sort(nums);
        for(int i = 0; i<n; i++){
            for(int j = n-1; j>i; j--){
                int prod = nums[i]*nums[j];
                Set<Integer> set = new HashSet<>();
                for(int k = i+1; k<j; k++){
                    if(prod % nums[k] == 0){
                        int div = prod / nums[k];
                        if(set.contains(div)) cnt++;
                        else set.add(nums[k]);
                    }
                }
            }
        }
        return cnt*8;
    }
}


// approach 4 O(n^2)
class Solution {
    public int tupleSameProduct(int[] nums) {
        int cnt = 0;
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i = 0; i<n; i++){
            for(int j = i+1; j<n; j++){
                map.put(nums[i]*nums[j], map.getOrDefault(nums[i]*nums[j], 0)+1);
            }
        }

        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if(entry.getValue()>1){
                int k = entry.getValue();
                int add = (k*(k-1))/2;
                cnt+=add;
            }
        }
        
        return cnt*8;
    }
}
