class Solution {

    class Pair {
        int first, second;
        Pair(int first, int second) {
            this.first = first;
            this.second = second;
        }
    }

    public int findMaximizedCapital(int k, int w, int[] profits, int[] capital) {
        int n = capital.length;
        if (k > n) k = n;
        Pair[] pair = new Pair[n];
        for(int i = 0; i < n; i++) {
            pair[i] = new Pair(capital[i], profits[i]);
        }

        Arrays.sort(pair, new Comparator<Pair>() {
            @Override
            public int compare(Pair p1, Pair p2){
                if(p1.first == p2.first){
                    return Integer.compare(p2.second, p1.second);
                }
                return Integer.compare(p1.first, p2.first);
            }
        });

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());
        int idx = 0;

        while(k > 0){
            while(idx < n && w >= pair[idx].first) {
                pq.offer(pair[idx].second);
                idx++;
            }

            if(!pq.isEmpty()) w += pq.poll();
            else  break;

            k--;
        }

        return w;
    }
}
