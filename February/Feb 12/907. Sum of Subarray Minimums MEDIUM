class Solution {
    long mod = 1000000007;
    public int sumSubarrayMins(int[] arr) {
        int n = arr.length;
        int[] nsl = findNsl(arr, n);
        int[] nsr = findNsr(arr, n);

        long sum = 0;
        for(int i=0; i<n; i++){
            long num = ((i - nsl[i]) * (nsr[i] - i));
            long newsum = arr[i] * num;
            sum = (sum + newsum) % mod;
        }

        return (int)sum;
    }

    int[] findNsl(int[] arr, int n){
        int[] nsl = new int[n];
        Stack<Integer> stk = new Stack<>();
        for(int i=0; i<n; i++){
            if(stk.isEmpty()) nsl[i] = -1;
            else {
                while(!stk.isEmpty() && arr[stk.peek()] >= arr[i]) stk.pop();
                nsl[i] = (stk.isEmpty()) ? -1 : stk.peek();
            }
            stk.push(i);
        }
        return nsl;
    }
    
    int[] findNsr(int[] arr, int n){
        int[] nsr = new int[n];
        Stack<Integer> stk = new Stack<>();
        for(int i=n-1; i>=0; i--){
            if(stk.isEmpty()) nsr[i] = n;
            else {
                while(!stk.isEmpty() && arr[stk.peek()] > arr[i]) stk.pop();
                nsr[i] = (stk.isEmpty()) ? n : stk.peek();
            }
            stk.push(i);
        }
        return nsr;
    }
}
