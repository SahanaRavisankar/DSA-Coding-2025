// approach 1
class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(b[0], a[0]));
        int m = nums1.length;
        int n = nums2.length;

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                int sum = nums1[i] + nums2[j];
                if(pq.size() < k) pq.offer(new int[]{sum, i, j});
                else if(pq.peek()[0] > sum){
                    pq.poll();
                    pq.offer(new int[]{sum, i, j});
                } else break;
            }
        }

        List<List<Integer>> res = new ArrayList<>();
        while(!pq.isEmpty()){
            int[] curr = pq.poll();
            List<Integer> temp = new ArrayList<Integer>();
            temp.add(nums1[curr[1]]);
            temp.add(nums2[curr[2]]);
            res.add(temp);
        }

        return res;
    }
}


// approach 2
class Solution {
    public List<List<Integer>> kSmallestPairs(int[] nums1, int[] nums2, int k) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        int m = nums1.length;
        int n = nums2.length;
        Set<String> set = new HashSet<>();

        int sum = nums1[0] + nums2[0];
        pq.offer(new int[]{sum, 0, 0});
        set.add("0,0");

        List<List<Integer>> res = new ArrayList<>();

        while(k-- > 0 && !pq.isEmpty()){
            int[] curr = pq.poll();
            int i = curr[1];
            int j = curr[2];
                        
            res.add(Arrays.asList(nums1[i], nums2[j]));
            
            if(!set.contains((i+1) + "," + j) && i+1 < m) {
                pq.offer(new int[]{nums1[i+1] + nums2[j], i+1, j});
                set.add((i+1) + "," + j);
            }
            
            if(!set.contains(i + "," + (j+1)) && j+1 < n) {
                pq.offer(new int[]{nums1[i] + nums2[j+1], i, j+1});
                set.add(i + "," + (j+1));
            }
        }
        
        return res;
    }
}
