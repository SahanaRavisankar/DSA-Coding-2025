class Solution {
    public long totalCost(int[] costs, int k, int c) {
        long ans = 0;
        int n = costs.length;
        int i = 0, j = n - 1;

        PriorityQueue<Integer> pq1 = new PriorityQueue<>();
        PriorityQueue<Integer> pq2 = new PriorityQueue<>();

        while(k > 0){
            while(pq1.size() < c && i <= j){
                pq1.offer(costs[i]);
                i++;
            }
            
            while(pq2.size() < c && i <= j){
                pq2.offer(costs[j]);
                j--;
            }

            int min1 = pq1.isEmpty() ? Integer.MAX_VALUE : pq1.peek();
            int min2 = pq2.isEmpty() ? Integer.MAX_VALUE : pq2.peek();

            if(min1 <= min2){
                pq1.poll();
                ans += min1;
            } else {
                pq2.poll();
                ans += min2;
            }

            k--;
        }

        return ans;
    }
}
