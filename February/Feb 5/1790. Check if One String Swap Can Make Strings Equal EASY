// approach 1
class Solution {
    public boolean areAlmostEqual(String s1, String s2) {
        if (s1.equals(s2))
            return true;

        if (s1.length() != s2.length())
            return false;
        
        int n = s1.length();
        int swap_need = 0;

        int[] count_s1 = new int[26];
        int[] count_s2 = new int[26];

        for (char ch : s1.toCharArray())
            count_s1[ch - 'a']++;
        
        for (char ch : s2.toCharArray())
            count_s2[ch - 'a']++;

        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i))
                swap_need++;
        }

        return swap_need <= 2 && Arrays.equals(count_s1, count_s2);
    }
}

// approach 2
class Solution {
    public boolean areAlmostEqual(String s1, String s2) {
        if (s1.equals(s2))
            return true;
        
        int n = s1.length();
        int idx1 = -1;
        int idx2 = -1;

        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) != s2.charAt(i)) {
                if (idx1 == -1)
                    idx1 = i;
                else if (idx1 != -1 && idx2 == -1)
                    idx2 = i;
                else
                    return false;
            }
        }
        if(idx2 == -1)
            return false;

        return s1.charAt(idx1) == s2.charAt(idx2) && s2.charAt(idx1) == s1.charAt(idx2);
    }
}
