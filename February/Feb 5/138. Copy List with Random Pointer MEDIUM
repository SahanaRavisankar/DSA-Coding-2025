/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

// approach 1 - O(n) time and O(n) space
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)
            return null;
        
        Map<Node, Node> mp = new HashMap<>();
        
        Node curr = head;
        Node prev = null;
        Node newHead = null;

        while(curr != null) {
            Node temp = new Node(curr.val);
            mp.put(curr, temp);
            if(newHead == null){
                newHead = temp;
                prev = newHead;
            } else {
                prev.next = temp;
                prev = temp;
            }
            curr = curr.next;
        }

        Node newcurr = newHead;
        curr = head;
        while(curr != null){
            if(curr.random == null)
                newcurr.random = null;
            else {
                Node rand = curr.random;
                Node deepCopyRand = mp.get(rand);
                newcurr.random = deepCopyRand;
            }
            curr = curr.next;
            newcurr = newcurr.next;
        }

        return newHead;
    }
}



// approach 2 O(n) time and space is debatable - O(n) or O(1)
class Solution {
    public Node copyRandomList(Node head) {
        if(head == null)
            return null;
        
        Node curr = head;    

        while(curr != null) {
            Node nextcurr = curr.next;
            curr.next = new Node(curr.val);
            curr.next.next = nextcurr;
            curr = curr.next.next;
        }

        curr = head;
        while(curr != null && curr.next != null){
            if(curr.random == null)
                curr.next.random = null;
            else
                curr.next.random = curr.random.next;
            
            curr = curr.next.next;
        }

        Node newHead = head.next;
        Node newcurr = newHead;
        curr = head;

        while(curr != null && newcurr != null){
            curr.next = (curr.next == null) ? null : curr.next.next;
            newcurr.next = (newcurr.next == null) ? null : newcurr.next.next;
            curr = curr.next;
            newcurr = newcurr.next;
        }

        return newHead;
    }
}
