// approach 1
class Solution {
    public int[] kthSmallestPrimeFraction(int[] arr, int k) {
        PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(b[0], a[0]));
        int n = arr.length;
        for(int i = 0; i < n; i++){
            for(int j = i + 1; j < n; j++){
                double frac = (double)arr[i]/arr[j];
                if(pq.size() < k) pq.offer(new double[]{frac, arr[i], arr[j]});
                else {
                    if(pq.peek()[0] > frac){
                        pq.poll();
                        pq.offer(new double[]{frac, arr[i], arr[j]});
                    }
                }
            }
        }

        return new int[]{(int)pq.peek()[1], (int)pq.peek()[2]};
    }
}


// approach 2
class Solution {
    public int[] kthSmallestPrimeFraction(int[] arr, int k) {
        PriorityQueue<double[]> pq = new PriorityQueue<>((a, b) -> Double.compare(a[0], b[0]));
        int n = arr.length;
        for(int i = 0; i < n - 1; i++){
            pq.offer(new double[]{(double) arr[i]/arr[n-1], i, n-1});
        }
        
        int cnt = 1;
        while(cnt < k){
            double[] curr = pq.poll();
            int i = (int) curr[1];
            int j = (int) curr[2] - 1;
            if (j > i) {
                pq.offer(new double[]{(double) arr[i] / arr[j], i, j});
            }
            cnt++;
        }

        return new int[]{arr[(int)pq.peek()[1]], arr[(int)pq.peek()[2]]};
    }
}
