// approach 1 brute force O(n)
class Solution {
    public int maxAscendingSum(int[] nums) {
        int n = nums.length;
        int maxsum = 0;
        for(int i=0; i<n; i++){
            int sum = nums[i];
            for(int j=i; j<n-1; j++){
                if(nums[j]<nums[j+1]){
                    sum += nums[j+1];
                } else break;
            }
            maxsum = Math.max(maxsum, sum);
        }
        return maxsum;
    }
}

// approach 2 optimal
class Solution {
    public int maxAscendingSum(int[] nums) {
        int n = nums.length;
        int maxsum = 0;
        int sum = 0;
        int i=0;
        if(n == 1) return nums[0];
        
        while(i<n-1){ 
            while(i+1<n && nums[i]<nums[i+1]){ 
                sum += nums[i]; 
                i++;
            } 
            sum += nums[i];
            
            maxsum = Math.max(maxsum, sum);
            i++;
            sum = 0;
        }
        return maxsum;
    }
}
