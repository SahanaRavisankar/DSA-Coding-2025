class Solution {
    public int maxTotalFruits(int[][] fruits, int p, int k) {
        int n = fruits.length;
        int[] psum = new int[n];
        psum[0] = fruits[0][1];
        for (int i = 1; i < n; i++) {
            psum[i] = psum[i - 1] + fruits[i][1];
        }

        int res = 0;

        for (int d = 0; d <= k / 2; d++) {
            int i = p - d;
            int j = p + k - (2 * d);
            int left = lowerbound(fruits, i, n);
            int right = upperbound(fruits, j, n) - 1;
            if (left <= right) {
                int max = psum[right] - (left - 1 >= 0 ? psum[left - 1] : 0);
                res = Math.max(res, max);
            }

            j = p + d;
            i = p - k + (2 * d);
            left = lowerbound(fruits, i, n);
            right = upperbound(fruits, j, n) - 1;
            if (left <= right) {
                int max = psum[right] - (left - 1 >= 0 ? psum[left - 1] : 0);
                res = Math.max(res, max);
            }
        }

        return res;
    }

    int lowerbound(int[][] fruits, int target, int n) {
        int low = 0;
        int high = n;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (target > fruits[mid][0]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }
    
    int upperbound(int[][] fruits, int target, int n) {
        int low = 0;
        int high = n;

        while (low < high) {
            int mid = low + (high - low) / 2;
            if (target >= fruits[mid][0]) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }

        return low;
    }
}
