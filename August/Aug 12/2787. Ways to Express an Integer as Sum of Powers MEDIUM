// approach 1 memoize + recursion
class Solution {
    int mod = 1_000_000_007;
    public int numberOfWays(int n, int x) {
        int[][] dp = new int[n + 1][n + 1];
        for (int[] t : dp)
            Arrays.fill(t, -1);
        
        return solve(n, x, 1, dp);
    }

    int solve(int n, int x, int num, int[][] dp) {
        if (n == 0)
            return 1;
        if (n < 0 || (long) Math.pow(num, x) > n)
            return 0;
        
        if (dp[n][num] != -1) {
            return dp[n][num];
        }

        int take = solve(n - (int) Math.pow(num, x), x, num + 1, dp);
        int skip = solve(n, x, num + 1, dp);

        return dp[n][num] = (take + skip) % mod;
    }
}
