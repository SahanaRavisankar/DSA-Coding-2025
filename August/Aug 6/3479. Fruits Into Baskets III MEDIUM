class Solution {
    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {
        int n = fruits.length;
        int[] segment = new int[4 * n];
        Arrays.fill(segment, -1);

        build(0, 0, n - 1, baskets, segment);
        int cnt = 0;

        for (int fr : fruits) {
            if (!query(0, 0, n - 1, segment, fr))
                cnt++;
        }

        return cnt;
    }

    boolean query(int i, int l, int r, int[] segment, int fr) {
        if (segment[i] < fr)
            return false;
        
        if (l == r) {
            segment[i] = -1;
            return true;
        }

        int mid = l + (r - l) / 2;
        boolean place = false;
        if (segment[2 * i + 1] >= fr) {
            place = query(2 * i + 1, l, mid, segment, fr);
        } else {
            place = query(2 * i + 2, mid + 1, r, segment, fr);
        }

        segment[i] = Math.max(segment[2 * i + 1], segment[2 * i + 2]);
        return place;
    }

    void build(int i, int l, int r, int[] baskets, int[] segment) {
        if (l == r) {
            segment[i] = baskets[l];
            return;
        }

        int mid = l + (r - l) / 2;
        build(2 * i + 1, l, mid, baskets, segment);
        build(2 * i + 2, mid + 1, r, baskets, segment);

        segment[i] = Math.max(segment[2 * i + 1], segment[2 * i + 2]);
    }
}
