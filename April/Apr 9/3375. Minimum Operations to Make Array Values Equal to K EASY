// approach 1
class Solution {
    public int minOperations(int[] nums, int k) {
        int op = 0;
        int n = nums.length;
        int max = Arrays.stream(nums).min().getAsInt();
        if(max < k) return -1;
        Map<Integer, Integer> map = new HashMap<>();
        for(int i : nums) map.put(i, map.getOrDefault(i, 0) + 1);

        List<Map.Entry<Integer, Integer>> list = new ArrayList<>(map.entrySet());
        list.sort(Map.Entry.<Integer, Integer>comparingByKey().reversed());
        
        int[][] sorted = new int[map.size()][2];
        int idx = 0;
        for(Map.Entry<Integer, Integer> entry : list) {
            sorted[idx][0] = entry.getKey();
            sorted[idx][1] = entry.getValue();
            idx++;
        }

        for(int i = 1; i < idx; i++) {
            op++;
            sorted[i][1] += sorted[i - 1][1];
        }

        if(sorted[idx - 1][0] != k) op++;
        
        return op;
    }
}


// approach 2
class Solution {
    public int minOperations(int[] nums, int k) {
        Set<Integer> set = new HashSet<>();
        for(int i : nums) {
            if(i < k) return -1;
            else if(i > k) set.add(i);
        }
        return set.size();
    }
}
