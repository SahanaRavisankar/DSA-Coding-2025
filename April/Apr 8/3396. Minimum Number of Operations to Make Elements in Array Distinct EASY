// approach 1
class Solution {
    public int minimumOperations(int[] nums) {
        int n = nums.length;
        int op = 0, i = 0, j = 0;
        Set<Integer> set = new HashSet<>();

        while(i < n && j < n) {
            if(set.contains(nums[j])) {
                int cnt = 0;
                while(i < n && cnt < 3) {
                    set.remove(nums[i]);
                    i++;
                    cnt++;
                }

                if(j < i) {
                    j = i;
                }

                op++;
            } else {
                set.add(nums[j]);
                j++;
            }
        }

        return op;
    }
}


// approach 2
class Solution {
    public int minimumOperations(int[] nums) {
        int n = nums.length;
        int op = 0;

        for(int i = 0; i < n; i += 3) {
            if(check(nums, i)) {
                return op;
            }
            op++;
        }

        return op;
    }

    boolean check(int[] nums, int i) {
        int n = nums.length;
        Set<Integer> set = new HashSet<>();
        for(int k = i; k < n; k++) {
            if(set.contains(nums[k]))
                return false;
            set.add(nums[k]);
        }
        return true;
    }
}


// approach 3
class Solution {
    public int minimumOperations(int[] nums) {
        int n = nums.length;
        Set<Integer> set = new HashSet<>();
        for(int i = n - 1; i >= 0; i--) {
            if(set.contains(nums[i])) {
                return (int) Math.ceil((i + 1) / 3.0);
            } else {
                set.add(nums[i]);
            }
        }
        return 0;
    }
}
