// approach 1
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        Arrays.sort(nums);
        List<Integer> temp = new ArrayList<>();
        List<Integer> res = new ArrayList<>();
        solve(nums, 0, -1, temp, res);
        return res;
    }

    void solve(int[] nums, int idx, int prev, List<Integer> temp, List<Integer> res){
        if(idx >= nums.length){
            if(res.size() < temp.size()) {
                res.clear();
                res.addAll(temp);
            }
            return;
        }
        
        if(prev == -1 || nums[idx] % nums[prev] == 0){
            temp.add(nums[idx]);
            solve(nums, idx + 1, idx, temp, res);
            temp.remove(temp.size() - 1);
        }
        solve(nums, idx + 1, prev, temp, res);
    }
}


// approach 2
class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        int[] dp = new int[n];
        Arrays.fill(dp, 1);
        
        int[] prev = new int[n];
        Arrays.fill(prev, -1);

        int idx = 0, max = 1;

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < i; j++) {
                if(nums[i] % nums[j] == 0) {
                    if(dp[i] < dp[j] + 1) {
                        dp[i] = dp[j] + 1;
                        prev[i] = j;
                    }

                    if(dp[i] > max) {
                        max = dp[i];
                        idx = i;
                    }
                }
            }
        }

        List<Integer> res = new ArrayList<>();
        while(idx != -1) {
            res.add(nums[idx]);
            idx = prev[idx];
        }

        return res;
    }
}
