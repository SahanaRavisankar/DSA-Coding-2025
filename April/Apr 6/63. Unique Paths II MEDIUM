// approach 1
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] t : dp) Arrays.fill(t, -1);
        return solve(0, 0, m, n, grid, dp);
    }

    int solve(int i, int j, int m, int n, int[][] grid, int[][] dp) {
        if(i >= m || j >= n || grid[i][j] == 1) return 0;
        if(i == m - 1 && j == n - 1) return 1;

        if(dp[i][j] != -1) return dp[i][j];

        return dp[i][j] = solve(i + 1, j, m, n, grid, dp) + solve(i, j + 1, m, n, grid, dp);
    }
}


// approach 2
class Solution {
    public int uniquePathsWithObstacles(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        
        for(int col = 0; col < n; col++) {
            if(col >= 1 && grid[0][col - 1] == 1) {
                dp[0][col] = 0;
                grid[0][col] = 1;
            } else if(grid[0][col] == 1) dp[0][col] = 0;
            else dp[0][col] = 1;
        }
        
        for(int row = 0; row < m; row++) {
            if(row >= 1 && grid[row - 1][0] == 1) {
                dp[row][0] = 0;
                grid[row][0] = 1;
            } else if(grid[row][0] == 1) dp[row][0] = 0;
            else dp[row][0] = 1;
        }

        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                if(grid[i][j] == 1) dp[i][j] = 0;
                else dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }

        return dp[m - 1][n - 1];
    }
}
