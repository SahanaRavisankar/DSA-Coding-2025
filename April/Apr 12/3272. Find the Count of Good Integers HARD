class Solution {
    public long countGoodIntegers(int n, int k) {
        int d = (n + 1) / 2;
        int low = (int) Math.pow(10, d - 1);
        int high = (int) Math.pow(10, d) - 1;
        Set<String> set = new HashSet<>();

        for(int i = low; i <= high; i++) {
            StringBuilder num = new StringBuilder();
            num.append(String.valueOf(i));
            if(n % 2 == 1) {
                StringBuilder temp = new StringBuilder(num.substring(0, d - 1));
                num.append(temp.reverse());
            } else {
                StringBuilder temp = new StringBuilder(num.substring(0, d));
                num.append(temp.reverse());
            }

            if(Long.valueOf(num.toString()) % k == 0) {
                char[] arr = num.toString().toCharArray();
                Arrays.sort(arr);
                set.add(new String(arr));
            }
        }

        long[] fact = new long[11];
        for(int i = 0; i < 11; i++) {
            fact[i] = factorial(i);
        }

        long res = 0;
        for(String s : set) {
            res += permutation(s, fact);
        }

        return res;
    }

    long permutation(String s, long[] fact) {
        int[] freq = new int[10];
        for(char ch : s.toCharArray()) {
            freq[ch - '0']++;
        }
        if(freq[0] == 0) {
            long res = fact[s.length()];
            for(int i : freq) {
                res /= fact[i];
            }
            return res;
        } else {
            long res = fact[s.length() - 1] * (s.length() - freq[0]);
            for(int i : freq) {
                res /= fact[i];
            }
            return res;
        }
    }

    long factorial(int n) {
        if(n == 0 || n == 1) return 1;
        long res = 1;
        for(int i = 2; i <= n; i++) {
            res *= i;
        }
        return res;
    }
}
