// approach 1
class Solution {
    List<List<String>> res = new ArrayList<>();
    public List<List<String>> partition(String s) {
        int n = s.length();
        res.clear();

        boolean[][] dp = new boolean[n][n];
        for(boolean[] t : dp) Arrays.fill(t, false);
        for(int i = 0; i < n; i++) dp[i][i] = true;

        for(int l = 2; l <= n; l++) {
            for(int i = 0; i + l - 1 < n; i++) {
                int j = i + l - 1;
                if(s.charAt(i) == s.charAt(j)){
                    if(l == 2) dp[i][j] = true;
                    else dp[i][j] = dp[i + 1][j - 1];
                }
            }
        }

        List<String> part = new ArrayList<>();
        solve(s, 0, part, dp, n);
        return res;
    }

    void solve(String s, int i, List<String> part, boolean[][] dp, int n) {
        if(i == n) {
            res.add(new ArrayList<>(part));
            return;
        }

        for(int j = i; j < n; j++) {
            if(dp[i][j]) {
                part.add(s.substring(i, j + 1));
                solve(s, j + 1, part, dp, n);
                part.remove(part.size() - 1);
            }
        }
    }
}


// approach 2
class Solution {
    List<List<String>> res = new ArrayList<>();
    public List<List<String>> partition(String s) {
        int n = s.length();
        res.clear();

        List<String> part = new ArrayList<>();
        solve(s, 0, part, n);
        return res;
    }

    void solve(String s, int i, List<String> part, int n) {
        if(i == n) {
            res.add(new ArrayList<>(part));
            return;
        }

        for(int j = i; j < n; j++) {
            if(isPalindrome(s.substring(i, j + 1))) {
                part.add(s.substring(i, j + 1));
                solve(s, j + 1, part, n);
                part.remove(part.size() - 1);
            }
        }
    }

    boolean isPalindrome(String s){
        int i = 0, j = s.length() - 1;
        while(i < j){
            if(s.charAt(i) == s.charAt(j)) {
                i++;
                j--;
            } else return false;
        }
        return true;
    }
}
