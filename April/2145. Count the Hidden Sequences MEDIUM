// approach 1
class Solution {
    public int numberOfArrays(int[] diff, int lower, int upper) {
        ArrayList<Integer> list = new ArrayList<>();
        int n = diff.length;

        for(int i = lower; i <= upper; i++) {
            list.add(i);
            for(int j = 0; j < n; j++) {
                int num = diff[j] + list.get(list.size() - 1);
                if(num >= lower && num <= upper) {
                    list.add(num);
                } else {
                    list.clear();
                    break;
                }
            }

            if(list.size() == n + 1) {
                break;
            }
        }
        
        if(list.isEmpty())
            return 0;

        int max = Integer.MIN_VALUE, min = Integer.MAX_VALUE;
        for(int i : list) {
            max = Math.max(max, i);
            min = Math.min(min, i);
        }

        int total = (upper - max) - (lower - min) + 1;

        return Math.max(0, total);
    }
}


// approach 2
int curr = 0; // Simulates building the array starting from a[0] = 0
        int minVal = 0;
        int maxVal = 0;

        for (int d : differences) {
            curr += d;
            minVal = Math.min(minVal, curr);
            maxVal = Math.max(maxVal, curr);

            if ((upper - maxVal) - (lower - minVal) + 1 <= 0) {
                return 0;
            }
        }

        return (upper - maxVal) - (lower - minVal) + 1;
    }
