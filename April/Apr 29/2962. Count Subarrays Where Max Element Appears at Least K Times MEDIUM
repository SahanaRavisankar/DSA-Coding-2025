// approach 1
class Solution {
    public long countSubarrays(int[] nums, int k) {
        long res = 0;
        int i = 0, j = 0, maxElCnt = 0;
        int n = nums.length;
        int max = Arrays.stream(nums).max().getAsInt();

        while(i < n && j < n) {
            if(nums[j] == max)
                maxElCnt++;
            
            while(i <= j && maxElCnt >= k) {
                res += n - j;
                if(nums[i] == max)
                    maxElCnt--;
                i++;
            }

            j++;
        }

        return res;
    }
}


// approach 2
class Solution {
    public long countSubarrays(int[] nums, int k) {
        long res = 0;
        int n = nums.length;
        int max = Arrays.stream(nums).max().getAsInt();
        int size = 0;
        List<Integer> list = new ArrayList<>();

        for (int i = 0; i < n; i++) {
            if (nums[i] == max) {
                size++;
                list.add(i);
            }
            
            if (size >= k) {
                res += list.get(size - k) + 1;
            }
        }

        return res;
    }
}
