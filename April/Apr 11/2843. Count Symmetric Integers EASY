// approach 1
class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int count = 0;
        for(int i = low; i <= high; i++) {
            if(check(i))
                count++;
        }
        return count;
    }

    boolean check(int num){
        String str = String.valueOf(num);
        int n = str.length();
        if(n % 2 == 1) return false;
        int sum1 = 0, sum2 = 0;
        for(int i = 0; i < n/2; i++) {
            sum1 += str.charAt(i) - '0';
            sum2 += str.charAt(n - 1 - i) - '0';
        }
        return sum1 == sum2;
    }
}


// approach 2
class Solution {
    public int countSymmetricIntegers(int low, int high) {
        int count = 0;
        for(int i = low; i <= high; i++) {
            if(10 <= i && i <= 99 && i % 11 == 0)
                count++;
            else if(1000 <= i && i <= 9999) {
                int s1 = i / 1000;
                s1 += (i / 100) % 10;
                int s2 = (i / 10) % 10;
                s2 += i % 10;
                if(s1 == s2)
                    count++;
            }
        }
        
        return count;
    }
}
