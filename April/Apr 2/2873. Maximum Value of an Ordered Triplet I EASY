// approach 1
class Solution {
    public long maximumTripletValue(int[] nums) {
        long max = 0;
        int n = nums.length;

        for(int i = 0; i < n; i++) {
            for(int j = i + 1; j < n; j++){
                for(int k = j + 1; k < n; k++){
                    if(i < j && j < k) {
                        long vali = (long) nums[i];
                        long valj = (long) nums[j];
                        long valk = (long) nums[k];
                        max = Math.max((vali - valj) * valk, max);
                    }
                }
            }
        }

        return max < 0 ? 0 : max;
    }
}


// approach 2
class Solution {
    public long maximumTripletValue(int[] nums) {
        long res = 0;
        int n = nums.length;

        int[] leftmax = new int[n];
        int[] rightmax = new int[n];
        int lm = 0, rm = 0;
        for(int i = 0; i < n; i++){
            leftmax[i] = lm;
            lm = Math.max(lm, nums[i]);
            rightmax[n - 1 - i] = rm;
            rm = Math.max(rm, nums[n - 1 - i]);
        }

        for(int i = 0; i < n; i++) {
            long v1 = leftmax[i];
            long v2 = rightmax[i];
            long v3 = nums[i];
            res = Math.max(res, (v1 - v3) * v2);
        }

        return res < 0 ? 0 : res;
    }
}


// approach 3
class Solution {
    public long maximumTripletValue(int[] nums) {
        long res = 0;
        int n = nums.length;
        long maxdiff = 0, maxi = 0;

        for(int i = 0; i < n; i++) {
            long num = nums[i];
            res = Math.max(res, maxdiff * num);
            maxdiff = Math.max(maxdiff, maxi - num);
            maxi = Math.max(maxi, num);
        }

        return res < 0 ? 0 : res;
    }
}
