class Solution {
    int n;
    int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int swimInWater(int[][] grid) {
        n = grid.length;
        int l = grid[0][0];
        int r = n * n - 1;
        int res = 0;

        while (l <= r) {
            int mid = l + (r - l) / 2;
            boolean[][] vis = new boolean[n][n];

            if (check(0, 0, grid, mid, vis)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return res;
    }

    boolean check(int i, int j, int[][] grid, int mid, boolean[][] vis) {
        if (i < 0 || i >= n || j < 0 || j >= n || vis[i][j] || grid[i][j] > mid)
            return false;
        vis[i][j] = true;

        if (i == n - 1 && j == n - 1)
            return true;
        
        for (int[] dir : direction) {
            int x = i + dir[0];
            int y = j + dir[1];
            if (check(x, y, grid, mid, vis))
                return true;
        }

        return false;
    }
}
