// approach 1
class Solution {
    public int minCostConnectPoints(int[][] points) {
        Map<Integer, List<int[]>> adj = new HashMap<>();
        int n = points.length;
        if(n == 1)
            return 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                int dist = Math.abs(points[i][0] - points[j][0]) + Math.abs(points[i][1] - points[j][1]);
                adj.computeIfAbsent(i, k -> new ArrayList<>()).add(new int[]{j, dist});
                adj.computeIfAbsent(j, k -> new ArrayList<>()).add(new int[]{i, dist});
            }
        }

        return minimumSpanningTree(n, adj);
    }

    int minimumSpanningTree(int v, Map<Integer, List<int[]>> adj) {
        int[] res = new int[v];
        Arrays.fill(res, Integer.MAX_VALUE);
        boolean[] bool = new boolean[v];
        
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, 0});
        int sum = 0;

        while(!pq.isEmpty()) {
            int d = pq.peek()[0];
            int u = pq.poll()[1];
            if(bool[u])
                continue;
            sum += d;
            bool[u] = true;

            for(int[] arr : adj.get(u)) {
                if(!bool[arr[0]]) {
                    pq.offer(new int[]{arr[1], arr[0]});
                }
            }
        }

        return sum;
    }
}