// approach 1
class Solution {
    int mod = (int) 1e9 + 7;
    public int possibleStringCount(String s, int k) {
        if(s.length() < k)
            return 0;

        List<Integer> freq = new ArrayList<>();
        int i = 0;
        int n = s.length();
        int prod = 1;

        while (i < n) {
            char ch = s.charAt(i);
            int cnt = 0;
            while (i < n && ch == s.charAt(i)) {
                cnt++;
                i++;
            }
            freq.add(cnt);
            prod = (int)((1L * prod * cnt) % mod);
        }

        if (freq.size() >= k)
            return prod;

        int[][] dp = new int[freq.size() + 1][k + 1];
        for (int[] t : dp)
            Arrays.fill(t, -1);

        int invalid = solve(0, 0, freq, k, freq.size(), dp);

        return (prod - invalid + mod) % mod;
    }

    int solve (int i, int count, List<Integer> freq, int k, int n, int[][] dp) {
        if (i >= n) {
            if (count < k)
                return 1;
            return 0;
        }

        if (dp[i][count] != -1)
            return dp[i][count];

        int res = 0;
        for (int take = 1; take <= freq.get(i); take++) {
            if (take + count < k) {
                res = (res + solve(i + 1, count + take, freq, k, n, dp)) % mod;
            } else {
                break;
            }
        }

        return dp[i][count] = res;
    }
}


// approach 2
class Solution {
    int mod = (int) 1e9 + 7;
    public int possibleStringCount(String s, int k) {
        if(s.length() < k)
            return 0;

        List<Integer> freq = new ArrayList<>();
        int i = 0;
        int n = s.length();
        int prod = 1;

        while (i < n) {
            char ch = s.charAt(i);
            int cnt = 0;
            while (i < n && ch == s.charAt(i)) {
                cnt++;
                i++;
            }
            freq.add(cnt);
            prod = (int)((1L * prod * cnt) % mod);
        }

        if (freq.size() >= k)
            return prod;
        
        n = freq.size();
        int[][] dp = new int[n + 1][k + 1];
        for (int cnt = k - 1; cnt >= 0; cnt--)
            dp[n][cnt] = 1;
        
        for (i = n - 1; i >= 0; i--) {
            for (int cnt = k - 1; cnt >= 0; cnt--) {
                int res = 0;
                for (int take = 1; take <= freq.get(i); take++) {
                    if (cnt + take < k) {
                        res = (res + dp[i + 1][cnt + take]) % mod;
                    } else {
                        break;
                    }
                }
                dp[i][cnt] = res;
            }
        }

        int invalid = dp[0][0];

        return (prod - invalid + mod) % mod;
    }
}


// approach 3
class Solution {
    int mod = (int) 1e9 + 7;
    public int possibleStringCount(String s, int k) {
        if(s.length() < k)
            return 0;

        List<Integer> freq = new ArrayList<>();
        int i = 0;
        int n = s.length();
        int prod = 1;

        while (i < n) {
            char ch = s.charAt(i);
            int cnt = 0;
            while (i < n && ch == s.charAt(i)) {
                cnt++;
                i++;
            }
            freq.add(cnt);
            prod = (int)((1L * prod * cnt) % mod);
        }

        if (freq.size() >= k)
            return prod;
        
        n = freq.size();
        int[][] dp = new int[n + 1][k + 1];
        for (int cnt = k - 1; cnt >= 0; cnt--)
            dp[n][cnt] = 1;
        
        for (i = n - 1; i >= 0; i--) {
            int[] prefix = new int[k + 1];
            for (int h = 1; h <= k; h++) {
                prefix[h] = (prefix[h - 1] + dp[i + 1][h - 1]) % mod;
            }

            for (int cnt = k - 1; cnt >= 0; cnt--) {
                int l = cnt + 1;
                int r = cnt + freq.get(i);
                if (r + 1 > k)
                    r = k - 1;

                if (l <= r) {
                    dp[i][cnt] = (prefix[r + 1] - prefix[l] + mod) % mod;
                }
            }
        }

        int invalid = dp[0][0];

        return (prod - invalid + mod) % mod;
    }
}