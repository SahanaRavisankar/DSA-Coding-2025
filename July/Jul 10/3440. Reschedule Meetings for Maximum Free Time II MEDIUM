class Solution {
    public int maxFreeTime(int eventTime, int[] startTime, int[] endTime) {
        int n = startTime.length;
        int[] freeTime = new int[n + 1];
        int idx = 0;
        freeTime[idx] = startTime[0];
        idx++;
        for (int i = 1; i < n; i++) {
            freeTime[idx] = startTime[i] - endTime[i - 1];
            idx++;
        }
        freeTime[idx] = eventTime - endTime[n - 1];

        int[] maxleft = new int[n + 1];
        int[] maxright = new int[n + 1];
        maxleft[0] = 0;
        maxright[n] = 0;

        for (int i = 1; i <= n; i++) {
            maxleft[i] = Math.max(maxleft[i - 1], freeTime[i - 1]);
        }
        
        for (int i = n - 1; i >= 0; i--) {
            maxright[i] = Math.max(maxright[i + 1], freeTime[i + 1]);
        }

        int res = 0;
        for (int i = 1; i<= n; i++) {
            int event = endTime[i - 1] - startTime[i - 1];
            if (event <= Math.max(maxleft[i - 1], maxright[i])) {
                res = Math.max(res, freeTime[i - 1] + event + freeTime[i]);
            }   
            res = Math.max(res, freeTime[i - 1] + freeTime[i]);
        }

        return res;
    }
}