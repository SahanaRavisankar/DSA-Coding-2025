// approach 1
class Solution {
    public int maximumUniqueSubarray(int[] nums) {
        Set<Integer> set = new HashSet<>();
        int n = nums.length;
        int i = 0, j = 0;
        int sum = 0, max = 0;
        while(j < n){
            if(!set.contains(nums[j])){
                sum += nums[j];
                set.add(nums[j]);
                j++;
                max = Math.max(max, sum);
            } else {
                sum -= nums[i];
                set.remove(nums[i]);
                i++;
            }
        }

        return max;
    }
}


// approach 2
class Solution {
    public int maximumUniqueSubarray(int[] nums) {
        int n = nums.length;
        int[] map = new int[10001];
        Arrays.fill(map, -1);
        int[] cumsum = new int[n];
        cumsum[0] = nums[0];

        for (int i = 1; i < n; i++) {
            cumsum[i] = cumsum[i - 1] + nums[i];
        }

        int i = 0, j = 0,  res = 0;
        while (j < n) {
            i = Math.max(i, map[nums[j]] + 1);
            int jsum = cumsum[j];
            int isum = i - 1 >= 0 ? cumsum[i - 1] : 0;
            res = Math.max(res, jsum - isum);
            map[nums[j]] = j;
            j++;
        }
        return res;
    }
}
