// approach 1
class Solution {
    public int maxValue(int[][] events, int k) {
        int n = events.length;
        Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));
        int[][] dp = new int[n + 1][k + 1];
        for(int[] t : dp)
            Arrays.fill(t, -1);
        return solve(events, 0, n, k, dp);
    }

    int solve(int[][] nums, int idx, int n, int k, int[][] dp) {
        if(k == 0 || idx >= n)
            return 0;

        if(dp[idx][k] != -1)
            return dp[idx][k];

        int take = 0;
        int i = idx + 1;
        for(i = idx + 1; i < n; i++) {
            if(nums[i][0] > nums[idx][1])
                break;
        }
        take = nums[idx][2] + solve(nums, i, n, k - 1, dp);

        int skip = solve(nums, idx + 1, n, k, dp);

        return dp[idx][k] = Math.max(take, skip);
    }
}


// approach 2
class Solution {
    public int maxValue(int[][] events, int k) {
        int n = events.length;
        Arrays.sort(events, (a, b) -> Integer.compare(a[0], b[0]));
        int[][] dp = new int[n + 1][k + 1];
        for(int[] t : dp)
            Arrays.fill(t, -1);
        return solve(events, 0, n, k, dp);
    }

    int solve(int[][] nums, int idx, int n, int k, int[][] dp) {
        if(k == 0 || idx >= n)
            return 0;

        if(dp[idx][k] != -1)
            return dp[idx][k];

        int take = 0;
        int i = upperbound(nums, nums[idx][1], idx + 1, n);
        take = nums[idx][2] + solve(nums, i, n, k - 1, dp);

        int skip = solve(nums, idx + 1, n, k, dp);

        return dp[idx][k] = Math.max(take, skip);
    }

    int upperbound(int[][] nums, int target, int l, int n) {
        int r = n - 1;
        int res = n;

        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(nums[mid][0] > target) {
                r = mid - 1;
                res = mid;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }
}