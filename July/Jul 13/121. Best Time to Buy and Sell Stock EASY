class Solution {
    public int maxProfit(int[] prices) {
        int[] ngr = getNextGreaterRight(prices);

        int max = 0;

        for(int i = 0; i < prices.length; i++) {
            if (ngr[i] == -1)
                continue;
            max = Math.max(max, ngr[i] - prices[i]);
        }

        return max;
    }

    int[] getNextGreaterRight(int[] prices) {
        int i = prices.length - 1;
        int[] ngr = new int[prices.length];
        Stack<Integer> stack = new Stack<>();

        while (i >= 0) {
            while (!stack.isEmpty() && prices[i] >= stack.peek())
                stack.pop();
            
            if (stack.isEmpty()) {
                ngr[i] = -1;
                stack.push(prices[i]);
            } else {
                ngr[i] = stack.peek();
            }
            i--;
        }

        return ngr;
    }
}
