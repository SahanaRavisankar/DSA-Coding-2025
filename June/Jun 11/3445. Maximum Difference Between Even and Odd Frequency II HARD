class Solution {
    public int maxDifference(String s, int k) {
        int n = s.length();
        int res = Integer.MIN_VALUE;

        for(char a = '0'; a <= '4'; a++){
            for(char b = '0'; b <= '4'; b++){
                if(a == b)
                    continue;
                int[] statePrevMin = new int[4];
                Arrays.fill(statePrevMin, Integer.MAX_VALUE);
                int counta = 0;
                int countb = 0;
                int preva = 0;
                int prevb = 0;
                int l = -1;
                int r = 0;

                while(r < n){
                    counta += (s.charAt(r) == a) ? 1 : 0;
                    countb += (s.charAt(r) == b) ? 1 : 0;

                    while(r - l >= k && countb - prevb >= 2 && counta - preva >= 1){
                        int leftside = getState(preva, prevb);
                        statePrevMin[leftside] = Math.min(preva - prevb, statePrevMin[leftside]);
                        l++;
                        preva += (s.charAt(l) == a) ? 1 : 0;
                        prevb += (s.charAt(l) == b) ? 1 : 0;
                    }

                    int rtside = getState(counta, countb);
                    int bestside = rtside ^ 2;
                    int mindiff = statePrevMin[bestside];
                    if(mindiff != Integer.MAX_VALUE){
                        res = Math.max(res, counta - countb - mindiff);
                    }
                    r++;
                }
            }
        }

        return res;
    }

    int getState(int counta, int countb){
        int a = counta % 2;
        int b = countb % 2;
        if(a == 0 && b == 0)
            return 0;
        else if(a == 0 && b == 1)
            return 1;
        else if(a == 1 && b == 0)
            return 2;
        return 3;
    }
}
