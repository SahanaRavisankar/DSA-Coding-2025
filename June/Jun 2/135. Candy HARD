// approach 1
class Solution {
    public int candy(int[] rating) {
        int n = rating.length;
        int[] candyleft = new int[n];
        Arrays.fill(candyleft, 1);
        int[] rightcandy = new int[n];
        Arrays.fill(rightcandy, 1);

        for(int i = 1; i < n; i++) {
            if(rating[i - 1] < rating[i])
                candyleft[i] = candyleft[i - 1] + 1;
        }
        
        for(int i = n - 2; i >= 0; i--) {
            if(rating[i + 1] < rating[i])
                rightcandy[i] = rightcandy[i + 1] + 1;
        }

        int res = 0;
        for(int i = 0; i < n; i++) {
            res += Math.max(rightcandy[i], candyleft[i]);
        }

        return res;
    }
}


// approach 2
class Solution {
    public int candy(int[] rating) {
        int n = rating.length;
        int res = n;
        int i = 1;

        while(i < n) {
            if(rating[i - 1] == rating[i]) {
                i++;
                continue;
            }

            int peak = 0;
            while(rating[i] > rating[i - 1]){
                peak++;
                res += peak;
                i++;
                if(i == n)
                    return res;
            }

            int dip = 0;
            while(i < n && rating[i] < rating[i - 1]){
                dip++;
                res += dip;
                i++;
            }

            res -= Math.min(peak, dip);
        }

        return res;
    }
}
