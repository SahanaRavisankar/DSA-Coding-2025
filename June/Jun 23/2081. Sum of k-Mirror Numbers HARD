class Solution {
    public long kMirror(int k, int n) {
        long sum = 0;
        int l = 1;

        while(n > 0) {
            int hl = (l + 1) / 2;
            long min = (long) Math.pow(10, hl - 1);
            long max = (long) Math.pow(10, hl) - 1;

            for(long num = min; num <= max; num++) {
                StringBuilder first = new StringBuilder(Long.toString(num));
                StringBuilder second = new StringBuilder(first).reverse();

                if(l % 2 == 0) {
                    first.append(second);
                } else {
                    first.append(second.substring(1));
                }

                long pal = Long.valueOf(first.toString());
                String base_k = baseK(pal, k);
                if(isPalindrome(base_k)){
                    sum += pal;
                    n--;
                    if(n == 0)
                        break;
                }
            }

            l++;
        }

        return sum;
    }

    String baseK(long num, int k) {
        if(num == 0)
            return "0";
        
        StringBuilder res = new StringBuilder();
        while(num > 0) {
            res.append(num % k);
            num /= k;
        }

        return res.toString();
    }

    boolean isPalindrome(String s) {
        int i = 0;
        int j = s.length() - 1;

        while(i < j){
            if(s.charAt(i) != s.charAt(j))
                return false;
            i++;
            j--;
        }

        return true;
    }
}
