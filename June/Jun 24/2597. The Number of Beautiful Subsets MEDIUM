class Solution {
    public int beautifulSubsets(int[] nums, int k) {
        int n = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        int[] res = {0};
        solve(map, n, nums, k, 0, res);
        return res[0] - 1;
    }

    void solve(Map<Integer, Integer> map, int n, int[] nums, int k, int idx, int[] res) {
        if(idx >= n) {
            res[0]++;
            return;
        }

        solve(map, n, nums, k, idx + 1, res);

        if(!map.containsKey(nums[idx] - k) && !map.containsKey(nums[idx] + k)) {
            map.put(nums[idx], map.getOrDefault(nums[idx], 0) + 1);
            solve(map, n, nums, k, idx + 1, res);
            map.put(nums[idx], map.get(nums[idx]) - 1);
            if(map.get(nums[idx]) == 0)
                map.remove(nums[idx]);
        }
    }
}
