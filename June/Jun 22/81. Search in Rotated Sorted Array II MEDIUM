class Solution {
    public boolean search(int[] nums, int target) {
        int pivot = findPivot(nums);

        return binarySearch(nums, 0, pivot - 1, target) || binarySearch(nums, pivot, nums.length - 1, target);
    }

    boolean binarySearch(int[] nums, int low, int high, int target){
        while(low <= high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] > target)
                high = mid - 1;
            else if(nums[mid] < target)
                low = mid + 1;
            else
                return true;
        }

        return false;
    }

    int findPivot(int[] nums) {
        int l = 0, r = nums.length - 1;
        
        while(l < r) {
            while(l < r && nums[l] == nums[l + 1])
                l++;
            while(l < r && nums[r] == nums[r - 1])
                r--;

            int mid = l + (r - l) / 2;
            if(nums[mid] > nums[r])
                l = mid + 1;
            else
                r = mid;
        }

        return r;
    }
}
