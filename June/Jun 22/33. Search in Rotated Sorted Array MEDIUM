class Solution {
    public int search(int[] nums, int target) {
        int pivot = findPivot(nums);
        int div1 = binarySearch(nums, 0, pivot - 1, target);
        int div2 = binarySearch(nums, pivot, nums.length - 1, target);
        
        return div1 == -1 ? div2 : div1;
    }

    int binarySearch(int[] nums, int low, int high, int target) {
        while(low <= high) {
            int mid = low + (high - low) / 2;

            if(nums[mid] > target)
                high = mid - 1;
            else if(nums[mid] < target)
                low = mid + 1;
            else
                return mid;
        }
        return -1;
    }

    int findPivot(int[] nums) {
        int l = 0, r = nums.length - 1;

        while(l < r) {
            int mid = l + (r - l) / 2;

            if(nums[mid] > nums[r])
                l = mid + 1;
            else
                r = mid;
        }

        return l;
    }
}
