// approach 1
class Solution {
    public int longestSubsequence(String s, int k) {
        int n = s.length();
        return solve(s, k, n - 1, n);
    }

    int solve(String s, int k, int i, int n) {
        if(i < 0)
            return 0;
        int bit = s.charAt(i) - '0';
        int val = bit == 1 ? (1 << (n - i - 1)) : 0;
        int take = 0;
        if(val <= k)
            take = 1 + solve(s, k - val, i - 1, n);
        int skip = solve(s, k, i - 1, n);
        return Math.max(take, skip);
    }
}


// approach 2
class Solution {
    public int longestSubsequence(String s, int k) {
        int n = s.length();
        int len = 0;
        int powval = 1;

        for(int i = n - 1; i >= 0; i--) {
            if(s.charAt(i) == '0') {
                len++;
            } else if(powval <= k) {
                k -= powval;
                len++;
            }

            if(powval <= k)
                powval <<= 1;
        }

        return len;
    }
}
