class Solution {
    public int[] searchRange(int[] nums, int target) {
        return new int[] {leftMost(nums, target), rightMost(nums, target)};
    }

    int leftMost(int[] nums, int target) {
        int r = nums.length - 1;
        int l = 0;
        int res = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] == target) {
                res = mid;
                r = mid - 1;
            } else if(nums[mid] > target) {
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        return res;
    }
    
    int rightMost(int[] nums, int target) {
        int r = nums.length - 1;
        int l = 0;
        int res = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if(nums[mid] == target) {
                res = mid;
                l = mid + 1;
            } else if(nums[mid] < target) {
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return res;
    }
}
