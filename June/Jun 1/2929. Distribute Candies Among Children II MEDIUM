// approach 1 recursion
class Solution {
    public long distributeCandies(int n, int limit) {
        return solve(0, limit, n);
    }

    long solve(int childCount, int limit, int n) {
        if(childCount == 3) {
            return (n == 0) ? 1 : 0;
        }

        long ways = 0;

        for(int i = 0; i <= Math.min(n, limit); i++) {
            if(n - i < 0)
                break;
            ways += solve(childCount + 1, limit, n - i);
        }

        return ways;
    }
}


// approach 2 iterative
class Solution {
    public long distributeCandies(int n, int limit) {
        long ways = 0;

        for(int ch1 = 0; ch1 <= Math.min(limit, n); ch1++) {
            for(int ch2 = 0; ch2 <= Math.min(limit, n - ch1); ch2++) {
                for(int ch3 = 0; ch3 <= Math.min(limit, n - ch2); ch3++) {
                    if(ch1 + ch2 + ch3 == n)
                        ways++;
                }
            }
        }

        return ways;
    }
}


// approach 3 better iterative
class Solution {
    public long distributeCandies(int n, int limit) {
        long ways = 0;

        for(int ch1 = 0; ch1 <= Math.min(limit, n); ch1++) {
            for(int ch2 = 0; ch2 <= Math.min(limit, n - ch1); ch2++) {
                int ch3 = n - ch1 - ch2;
                if(ch3 >= 0 && ch3 <= limit && ch1 + ch2 + ch3 == n)
                    ways++;
            }
        }

        return ways;
    }
}


// approach 4 min max approach
class Solution {
    public long distributeCandies(int n, int limit) {
        long ways = 0;
        int min = Math.max(0, n - (2 * limit));
        int max = Math.min(n, limit);

        for(int i = min; i <= max; i++) {
            int m = n - i;
            int minch2 = Math.max(0, m - limit);
            int maxch2 = Math.min(m, limit);
            ways += maxch2 - minch2 + 1;
        }

        return ways;
    }
}
