class Solution {
    
    static class Pair {
        int first, second;
        
        Pair (int first, int second) {
            this.first = first;
            this.second = second;
        }
    }
    
    public List<Integer> shortestPath(int n, int m, int edges[][]) {
        Map<Integer, List<Pair>> map = new HashMap<>();
        for(int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            int wt = edge[2];
            map.computeIfAbsent(u, k -> new ArrayList<Pair>()).add(new Pair(v, wt));
            map.computeIfAbsent(v, k -> new ArrayList<Pair>()).add(new Pair(u, wt));
        }
        
        List<Integer> ans = new ArrayList<>();
        
        PriorityQueue<Pair> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a.first));
        int[] res = new int[n + 1];
        Arrays.fill(res, Integer.MAX_VALUE);
        
        int[] parent = new int[n + 1];
        for(int i = 1; i <= n; i++) {
            parent[i] = i;
        }
        
        res[1] = 0;
        pq.offer(new Pair(0, 1));
        
        while(!pq.isEmpty()) {
            int d = pq.peek().first;
            int node = pq.peek().second;
            pq.poll();
            
            for(Pair vec : map.getOrDefault(node, new ArrayList<Pair>())) {
                int adjn = vec.first;
                int wt = vec.second;
                
                if(res[adjn] > d + wt) {
                    parent[adjn] = node;
                    res[adjn] = d + wt;
                    pq.offer(new Pair(d + wt, adjn));
                }
            }
        }
        
        int node = n;
        
        if(res[n] == Integer.MAX_VALUE) {
            List<Integer> list = new ArrayList<>();
            list.add(-1);
            return list;
        }
        
        while(parent[node] != node) {
            ans.add(node);
            node = parent[node];
        }
        ans.add(1);
        
        return ans;
    }
}
