// approach 1
class Solution {
    public int minFlipsMonoIncr(String s) {
        int n = s.length();
        int[][] dp = new int[n][2];
        for(int[] t : dp)
            Arrays.fill(t, -1);

        return solve(s, n, 0, 0, dp);
    }

    int solve(String s, int n, int curr_idx, int prev, int[][] dp) {
        if(curr_idx >= n)
            return 0;

        if(dp[curr_idx][prev] != -1)
            return dp[curr_idx][prev];

        int flip = Integer.MAX_VALUE, noflip = Integer.MAX_VALUE;
        if(s.charAt(curr_idx) == '1') {
            if(prev == 0) {
                flip = 1 + solve(s, n, curr_idx + 1, 0, dp);
                noflip = solve(s, n, curr_idx + 1, 1, dp);
            } else {
                noflip = solve(s, n, curr_idx + 1, 1, dp);
            }
        } else {
            if(prev == 0) {
                flip = 1 + solve(s, n, curr_idx + 1, 1, dp);
                noflip = solve(s, n, curr_idx + 1, 0, dp);
            } else {
                flip = 1 + solve(s, n, curr_idx + 1, 1, dp);
            }
        }

        return dp[curr_idx][prev] = Math.min(flip, noflip);
    }
}


// aproach 2
class Solution {
    public int minFlipsMonoIncr(String s) {
        int n = s.length();
        int flip = 0, count_1 = 0;
        for(int i = 0; i < n; i++) {
            if(s.charAt(i) == '1')
                count_1++;
            else
                flip = Math.min(flip + 1, count_1);
        }
        return flip;
    }
}
