class Solution {
    public int networkDelayTime(int[][] times, int n, int k) {
        Map<Integer, List<int[]>> adj = new HashMap<>();
        for(int[] time : times) {
            int u = time[0];
            int v = time[1];
            int w = time[2];
            adj.computeIfAbsent(u - 1, x -> new ArrayList<int[]>()).add(new int[]{v - 1, w});
        }

        int[] res = new int[n];
        Arrays.fill(res, Integer.MAX_VALUE);
        res[k - 1] = 0;

        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        pq.offer(new int[]{0, k - 1});

        while(!pq.isEmpty()) {
            int d = pq.peek()[0];
            int node = pq.peek()[1];
            pq.poll();

            for(int[] vector : adj.getOrDefault(node, new ArrayList<int[]>())) {
                int adjn = vector[0];
                int wt = vector[1];

                if(wt + d < res[adjn]) {
                    res[adjn] = wt + d;
                    pq.offer(new int[]{wt + d, adjn});
                }
            }
        }

        int max = Arrays.stream(res).max().getAsInt();
        return max == Integer.MAX_VALUE ? -1 : max;
    }
}
