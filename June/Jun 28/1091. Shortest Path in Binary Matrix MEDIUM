// approach 1
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if(grid[0][0] == 1 || grid[n - 1][n - 1] == 1)
            return -1;
        int[][] direc = {{1, 1}, {-1, -1}, {1, -1}, {-1, 1}, {1, 0}, {-1, 0}, {0, 1}, {0, -1}};
        int level = 0;
        Queue<int[]> que = new LinkedList<>();

        que.offer(new int[]{0, 0});
        grid[0][0] = 1;
        
        while(!que.isEmpty()) {
            int m = que.size();

            while(m-- > 0) {
                int i = que.peek()[0];
                int j = que.peek()[1];
                que.poll();

                if(i == n - 1 && j == n - 1) {
                    return level + 1;
                }

                for(int[] dir : direc) {
                    int i_ = i + dir[0];
                    int j_ = j + dir[1];
                    if(i_ >= 0 && i_ < n && j_ >=0 && j_ < n && grid[i_][j_] != 1) {
                        que.offer(new int[]{i_, j_});
                        grid[i_][j_] = 1;
                    }
                }
            }

            level++;
        }

        return -1;
    }
}


// approach 2
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if(grid[0][0] == 1 || grid[n - 1][n - 1] == 1)
            return -1;
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        int[][] res = new int[n][n];
        for(int[] r : res)
            Arrays.fill(r, Integer.MAX_VALUE);

        res[0][0] = 0;
        grid[0][0] = 1;
        pq.offer(new int[]{0, 0, 0});
        int[][] direc = {{1, 1}, {1, 0}, {1, -1}, {-1, -1}, {-1, 0}, {-1, 1}, {0, 1}, {0, -1}};

        while(!pq.isEmpty()) {
            int i = pq.peek()[1];
            int j = pq.peek()[2];
            int d = pq.poll()[0];

            for(int[] dir : direc) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < n && j_ >= 0 && j_ < n && grid[i_][j_] == 0) {
                    if(res[i_][j_] > d + 1) {
                        res[i_][j_] = d + 1;
                        grid[i_][j_] = 1;
                        pq.offer(new int[]{d + 1, i_, j_});
                    }
                }
            }
        }

        return res[n - 1][n - 1] == Integer.MAX_VALUE ? -1 : res[n - 1][n - 1] + 1;
    }
}


// approach 3
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if(grid[0][0] == 1 || grid[n - 1][n - 1] == 1)
            return -1;
        Queue<int[]> pq = new LinkedList<>();
        int[][] res = new int[n][n];
        for(int[] r : res)
            Arrays.fill(r, Integer.MAX_VALUE);

        res[0][0] = 0;
        grid[0][0] = 1;
        pq.offer(new int[]{0, 0, 0});
        int[][] direc = {{1, 1}, {1, 0}, {1, -1}, {-1, -1}, {-1, 0}, {-1, 1}, {0, 1}, {0, -1}};

        while(!pq.isEmpty()) {
            int i = pq.peek()[1];
            int j = pq.peek()[2];
            int d = pq.poll()[0];

            for(int[] dir : direc) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];

                if(i_ >= 0 && i_ < n && j_ >= 0 && j_ < n && grid[i_][j_] == 0) {
                    if(res[i_][j_] > d + 1) {
                        res[i_][j_] = d + 1;
                        grid[i_][j_] = 1;
                        pq.offer(new int[]{d + 1, i_, j_});
                    }
                }
            }
        }

        return res[n - 1][n - 1] == Integer.MAX_VALUE ? -1 : res[n - 1][n - 1] + 1;
    }
}
