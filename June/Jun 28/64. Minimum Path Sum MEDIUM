// approach 1
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        for(int[] t : dp)
            Arrays.fill(t, -1);

        return solve(0, 0, grid, m, n, dp);
    }

    int solve(int i, int j, int[][] grid, int m, int n, int[][] dp) {
        if(i == m - 1 && j == n - 1)
            return grid[i][j];
        else if(dp[i][j] != -1)
            return dp[i][j];
        else if(i == m - 1)
            return dp[i][j] = grid[i][j] + solve(i, j + 1, grid, m, n, dp);
        else if(j == n - 1)
            return dp[i][j] = grid[i][j] + solve(i + 1, j, grid, m, n, dp);
        else
            return dp[i][j] = grid[i][j] + Math.min(solve(i + 1, j, grid, m, n, dp), solve(i, j + 1, grid, m, n, dp));
    }
}


// approach 2
class Solution {
    public int minPathSum(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][] dp = new int[m][n];
        dp[0][0] = grid[0][0];
        
        for(int i = 1; i < m; i++) {
            dp[i][0] = grid[i][0] + dp[i - 1][0];
        }

        for(int i = 1; i < n; i++) {
            dp[0][i] = grid[0][i] + dp[0][i - 1];
        }

        for(int i = 1; i < m; i++) {
            for(int j = 1; j < n; j++) {
                dp[i][j] = Math.min(dp[i - 1][j], dp[i][j - 1]) + grid[i][j];
            }
        }

        return dp[m - 1][n - 1];
    }
}
