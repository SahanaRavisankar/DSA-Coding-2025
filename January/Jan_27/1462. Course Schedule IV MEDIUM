// APPROACH 1
class Solution {
    public List<Boolean> checkIfPrerequisite(int numCourses, int[][] prerequisites, int[][] queries) {
        Map<Integer, List<Integer>> adj = new HashMap<>();
        for(int[] e:prerequisites){
            int u = e[0];
            int v = e[1];
            adj.putIfAbsent(u, new ArrayList<>());
            adj.get(u).add(v);
        }
        List<Boolean> res = new ArrayList<>();
        int q = queries.length;
        for(int i=0; i<q; i++){
            int u = queries[i][0];
            int v = queries[i][1];
            boolean[] vis = new boolean[numCourses];
            Arrays.fill(vis, false);
            boolean b = dfs(adj, u, v, vis);
            res.add(b);
        }
        return res;
    }

    boolean dfs(Map<Integer, List<Integer>> adj, int u, int v, boolean[] vis){
        vis[u] = true;
        if(u==v) return true;
        boolean flag = false;
        for(int adjn:adj.getOrDefault(u, new ArrayList<>())){
            if(!vis[adjn]) flag = flag || dfs(adj, adjn, v, vis);
        }
        return flag;
    }
}
