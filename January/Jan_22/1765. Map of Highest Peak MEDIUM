// MULTISOURCE BFS
class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int m = isWater.length;
        int n = isWater[0].length;
        int[][] ht = new int[m][n];
        Queue<int[]> queue = new LinkedList<>();

        for(int i=0; i<m; i++) {
            for(int j=0; j<n; j++) {
                if(isWater[i][j] == 1) {
                    ht[i][j] = 0;
                    queue.offer(new int[]{i, j});
                } else ht[i][j] = -1;
            }
        }

        while(!queue.isEmpty()) {
            int s = queue.size();
            while(s-- > 0){
                int[] curr = queue.poll();
                int i = curr[0];
                int j = curr[1];
                int[][] direction = {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
                for(int[] dir:direction) {
                    int i_ = i + dir[0];
                    int j_ = j + dir[1];
                    if(i_ >= 0 && j_ >= 0 && i_ < m && j_ < n && ht[i_][j_] == -1){
                        ht[i_][j_] = ht[i][j] + 1;
                        queue.offer(new int[]{i_, j_});
                    }
                }
            }
        }

        return ht;
    }
}
