class Solution {
    public String shortestPalindrome(String s) {
        StringBuilder res = new StringBuilder();
        StringBuilder rev = new StringBuilder();
        rev.append(s).reverse();
        int n = s.length();
        for(int i=0; i<n; i++){
            if(s.substring(0, n-i).equals(rev.substring(i, n))) return res.append(rev.substring(0,i)).append(s).toString();
        }
        return res.append(rev).append(s).toString();
    }
}

class Solution {
    public String shortestPalindrome(String s) {
        StringBuilder res = new StringBuilder();
        StringBuilder rev = new StringBuilder();
        StringBuilder temp = new StringBuilder();
        rev.append(s).reverse();
        temp.append(s).append('#').append(rev);
        int n = temp.length();
        int[] lps = lpsKMP(temp.toString());
        int i = lps[n-1];
        return res.append(rev.substring(0, s.length()-i)).append(s).toString();
    }

    int[] lpsKMP(String s){
        int n = s.length();
        int len = 0;
        int i=1;
        int[] lps = new int[n];
        lps[0] = 0;
        while(i<n){
            if(s.charAt(i) == s.charAt(len)){
                len++;
                lps[i] = len;
                i++;
            } else{
                if(len != 0) len = lps[len-1];
                else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
}
