// Go and study other approach - graph playlist
class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> adj = new ArrayList<>();
        int v = graph.length;
        for(int i=0; i<v; i++){
            adj.add(new ArrayList<>());
            for(int u:graph[i]) adj.get(i).add(u);
        }
        boolean[] vis = new boolean[v];
        boolean[] rec = new boolean[v];
        for(int i=0; i<v; i++){
            if(!vis[i]) cycle(adj, i, vis, rec);
        }

        List<Integer> list = new ArrayList<>();
        for(int i=0; i<v; i++) if(!rec[i]) list.add(i);
        return list;
    }

    boolean cycle(List<List<Integer>> adj, int u, boolean[] vis, boolean[] rec) {
        vis[u] = true;
        rec[u] = true;
        for(int v:adj.get(u)){
            if(!vis[v] && cycle(adj, v, vis, rec)) return true;
            else if(rec[v]) return true;
        }
        rec[u] = false;
        return false;
    }
}
