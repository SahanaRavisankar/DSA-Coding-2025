// APPROACH 1
class Solution {

    int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    grid[i][j] = 1;
                    
                    boolean[][] vis = new boolean[n][n];
                    int large = 0;
                    for (int x = 0; x < n; x++) {
                        for (int y = 0; y < n; y++) {
                            if (grid[x][y] == 1 && !vis[x][y])
                                large = Math.max(large, dfs(grid, x, y, vis, n));
                        }
                    }

                    grid[i][j] = 0;
                    max = Math.max(large, max);
                }
            }
        }
        return (max == 0) ? n * n : max;
    }

    int dfs(int[][] grid, int x, int y, boolean[][] vis, int n) {
        if (x < 0 || x >= n || y < 0 || y >= n || vis[x][y] || grid[x][y] == 0)
            return 0;
        
        int size = 1;
        vis[x][y] = true;
        for (int[] dir : direction) {
            int i_ = x + dir[0];
            int j_ = y + dir[1];
            size += dfs(grid, i_, j_, vis, n);
        }
        return size;
    }
}


// APPROACH 2
class Solution {

    int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        int max = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    grid[i][j] = 1;
                    
                    boolean[][] vis = new boolean[n][n];
                    max = Math.max(max, dfs(grid, i, j, vis, n));

                    grid[i][j] = 0;
                } else {
                    boolean[][] vis = new boolean[n][n];
                    max = Math.max(max, dfs(grid, i, j, vis, n));
                }
            }
        }
        return (max == 0) ? n * n : max;
    }

    int dfs(int[][] grid, int x, int y, boolean[][] vis, int n) {
        if (x < 0 || x >= n || y < 0 || y >= n || vis[x][y] || grid[x][y] == 0)
            return 0;
        
        int size = 1;
        vis[x][y] = true;
        for (int[] dir : direction) {
            int i_ = x + dir[0];
            int j_ = y + dir[1];
            size += dfs(grid, i_, j_, vis, n);
        }
        return size;
    }
}


// APPROACH 3
class Solution {

    int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        int max = 0;
        boolean[][] visited = new boolean[n][n];
        for (boolean[] b : visited)
            Arrays.fill(b, false);

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    grid[i][j] = 1;
                    
                    boolean[][] vis = new boolean[n][n];
                    max = Math.max(max, dfs(grid, i, j, vis, n));

                    grid[i][j] = 0;
                } else if (grid[i][j] == 1 && !visited[i][j]) {
                    boolean[][] vis = new boolean[n][n];
                    max = Math.max(max, dfs(grid, i, j, visited, n));
                }
            }
        }
        return (max == 0) ? n * n : max;
    }

    int dfs(int[][] grid, int x, int y, boolean[][] vis, int n) {
        if (x < 0 || x >= n || y < 0 || y >= n || vis[x][y] || grid[x][y] == 0)
            return 0;
        
        int size = 1;
        vis[x][y] = true;
        for (int[] dir : direction) {
            int i_ = x + dir[0];
            int j_ = y + dir[1];
            size += dfs(grid, i_, j_, vis, n);
        }
        return size;
    }
}


// APPROACH 4
class Solution {

    int[][] direction = {{1, 0}, {-1, 0}, {0, 1}, {0, -1}};

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        int max = 0;
        Map<Integer, Integer> map = new HashMap<>();
        int id = 2;
        

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    int x = dfs(grid, i, j, id, n);
                    map.put(id, x);
                    max = Math.max(max, x);
                    id++;
                }
            }
        }
        
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if(grid[i][j] == 0){
                    Set<Integer> set = new HashSet<>();
                    for (int[] dir : direction) {
                        int x = i + dir[0];
                        int y = j + dir[1];
                        if (x < n && y < n && x >= 0 && y >= 0 && grid[x][y] != 0) {
                            set.add(grid[x][y]);
                        }                    
                    }

                    int num = 1;

                    for (int k : set) {
                        num += map.get(k);
                    }
                    
                    max = Math.max(max, num);
                }
            }
        }

        return (max == 0) ? n * n : max;
    }

    int dfs(int[][] grid, int x, int y, int id, int n) {
        if (x < 0 || x >= n || y < 0 || y >= n || grid[x][y] != 1)
            return 0;
        
        int size = 1;
        grid[x][y] = id;
        for (int[] dir : direction) {
            int i_ = x + dir[0];
            int j_ = y + dir[1];
            size += dfs(grid, i_, j_, id, n);
        }
        
        return size;
    }
}
