class Solution {
    public int countPalindromicSubsequence(String s) {
        int n = s.length();
        int res = 0;
        Set<Character> letter = new HashSet<>(); // set of all char
        for(char c:s.toCharArray()) letter.add(c);
        
        for(char c:letter){
            // initialise
            int lf = -1;
            int rt = -1;

            // find leftmost and rightmost index
            for(int i=0; i<n; i++){
                if(s.charAt(i) == c){
                    if(lf == -1) lf = i;
                    rt = i;
                }
            }

            // add all elements in between
            Set<Character> set = new HashSet<>();
            for(int mid = lf+1; mid<rt; mid++){
                set.add(s.charAt(mid));
            }

            // add size to res
            res += set.size();
        }

        return res;
    }
}

class Solution {
    public int countPalindromicSubsequence(String s) {
        int n = s.length();
        int res = 0;

        int[] first = new int[26];
        int[] second = new int[26];
        Arrays.fill(first, -1);
        Arrays.fill(second, -1);

        for(int i=0; i<n; i++){
            int ch = s.charAt(i)-'a';
            if(first[ch] == -1) first[ch] = i;
            second[ch] = i;
        }
        
        for(int i=0; i<26; i++){
            // initialise
            int lf = first[i];
            int rt = second[i];

            if(lf == -1) continue;

            // add all elements in between
            Set<Character> set = new HashSet<>();
            for(int mid = lf+1; mid<rt; mid++){
                set.add(s.charAt(mid));
            }

            // add size to res
            res += set.size();
        }

        return res;
    }
}
