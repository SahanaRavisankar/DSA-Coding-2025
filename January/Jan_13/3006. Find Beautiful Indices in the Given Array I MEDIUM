class Solution {
    public List<Integer> beautifulIndices(String s, String a, String b, int k) {
        List<Integer> res = new ArrayList<>();
        ArrayList<Integer> i_ind = kmp(a, s);
        ArrayList<Integer> j_ind = kmp(b, s);
        int n = s.length();

        for(int i:i_ind){
            int lf = Math.max(0, i-k);
            int rt = Math.min(n-1, i+k);

            int ind = lowerBound(j_ind, lf);

            if(ind < j_ind.size() && j_ind.get(ind)<=rt) res.add(i);
        }
        return res;
    }

    int lowerBound(List<Integer> list, int target) {
        int left = 0, right = list.size() - 1, result = list.size();

        while (left <= right) {
            int mid = left + (right - left) / 2;

            if (list.get(mid) >= target) {
                result = mid;
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }

        return result;
    }

    ArrayList<Integer> kmp(String pat, String txt) {
        ArrayList<Integer> res = new ArrayList<>();
        int[] lps = lps_kmp(pat);
        int i = 0, j = 0;
        int m = pat.length(), n = txt.length();
        while (i < n) {
            if (j < m && txt.charAt(i) == pat.charAt(j)) {
                i++;
                j++;
            }
            if (j == m) {
                res.add(i - j);
                j = lps[j - 1];
            } else if (i<n && (j == 0 || pat.charAt(j) != txt.charAt(i))) {
                if (j != 0)
                    j = lps[j - 1];
                else
                    i++;
            }
        }
        return res;
    }

    int[] lps_kmp(String p){
        int m = p.length();
        int[] lps = new int[m];
        lps[0] = 0;
        int len = 0;
        int i=1;
        while(i<m){
            if(p.charAt(i) == p.charAt(len)){
                len++;
                lps[i] = len;
                i++;
            } else {
                if(len != 0) len = lps[len-1];
                else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
        return lps;
    }
}
