class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        int n = edges.length;
        for(int i=0; i<n; i++) {
            int u = edges[i][0];
            int v = edges[i][1];
            boolean[] vis = new boolean[n+1];
            Arrays.fill(vis, false);
            if(adj.containsKey(u) && adj.containsKey(v) && dfs(adj, u, v, vis)) return edges[i];
            if(!adj.containsKey(u)) {
                adj.put(u, new ArrayList<Integer>());
                adj.get(u).add(v);
            } else if(adj.containsKey(u)) adj.get(u).add(v);
            
            if(!adj.containsKey(v)) {
                adj.put(v, new ArrayList<Integer>());
                adj.get(v).add(u);
            } else if(adj.containsKey(v)) adj.get(v).add(u);

        }

        int[] res = new int[2];
        return res;
    }

    boolean dfs(Map<Integer, ArrayList<Integer>> adj, int u, int v, boolean[] vis){
        vis[u] = true;
        if(u==v) return true;
        for(int i:adj.get(u)){
            if(vis[i]) continue;
            if(dfs(adj, i, v, vis)) return true;
        }
        return false;
    }
}
