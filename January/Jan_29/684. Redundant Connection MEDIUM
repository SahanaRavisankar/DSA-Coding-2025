// approach 1 - dfs
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        int n = edges.length;
        for(int[] ed:edges){
            boolean[] vis = new boolean[n];
            int u = ed[0]-1;
            int v = ed[1]-1;
            if(adj.containsKey(u) && adj.containsKey(v) && dfs(adj, v, u, vis)) 
                return ed;

            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }

        int[] res = new int[2];
        return res;
    }

    boolean dfs(Map<Integer, ArrayList<Integer>> adj, int u, int v, boolean[] vis){
        vis[u] = true;
        if(v == u) return true;
        vis[u] = true;
        for(int n:adj.get(u)){
            if(vis[n]) continue;
            if(dfs(adj, n, v, vis)) return true;
        }
        return false;
    }
}


// approach 2 - bfs
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        int n = edges.length;
        for(int[] ed:edges){
            boolean[] vis = new boolean[n];
            int u = ed[0]-1;
            int v = ed[1]-1;
            if(adj.containsKey(u) && adj.containsKey(v) && bfs(adj, v, u, vis)) 
                return ed;

            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }

        int[] res = new int[2];
        return res;
    }

    boolean bfs(Map<Integer, ArrayList<Integer>> adj, int u, int v, boolean[] vis){
        if(u == v) return true;
        vis[u] = true;
        Queue<Integer> que = new LinkedList<>();
        que.offer(u);
        while(!que.isEmpty()){
            int p = que.poll();
            vis[p] = true;
            for(int n:adj.get(p)){
                if(!vis[n]){
                    if(n == v) return true;
                    que.offer(n);
                }
            }
        }
        return false;
    }
}


// approach 3 - dsu
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        int[] parent = new int[n+1];
        for(int i=0; i<n+1; i++) parent[i] = i;
        int[] rank = new int[n+1];
        Arrays.fill(rank, 0);

        for(int[] ed:edges){
            int u = ed[0];
            int v = ed[1];
            if(isConnected(u, v, parent)) 
                return ed;

            union(u, v, parent, rank);
        }

        int[] res = new int[2];
        return res;
    }

    int find(int i, int[] parent){
        if (i == parent[i])
            return i;

        return parent[i] = find(parent[i], parent);
    }

    boolean isConnected(int x, int y, int[] parent){
        int xp = find(x, parent);
        int yp = find(y, parent);

        return xp == yp;
    }

    void union(int x, int y, int[] parent, int[] rank) {
        int xp = find(x, parent);
        int yp = find(y, parent);

        if (xp == yp)
            return;

        if (rank[xp] > rank[yp]) {
            parent[yp] = xp;
        } else if (rank[yp] > rank[xp]) {
            parent[xp] = yp;
        } else {
            parent[xp] = yp;
            rank[yp]++;
        }
    }
}
