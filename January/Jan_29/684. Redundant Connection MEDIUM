// approach 1 - dfs
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        int n = edges.length;
        for(int[] ed:edges){
            boolean[] vis = new boolean[n];
            int u = ed[0]-1;
            int v = ed[1]-1;
            if(adj.containsKey(u) && adj.containsKey(v) && dfs(adj, v, u, vis)) 
                return ed;

            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }

        int[] res = new int[2];
        return res;
    }

    boolean dfs(Map<Integer, ArrayList<Integer>> adj, int u, int v, boolean[] vis){
        vis[u] = true;
        if(v == u) return true;
        vis[u] = true;
        for(int n:adj.get(u)){
            if(vis[n]) continue;
            if(dfs(adj, n, v, vis)) return true;
        }
        return false;
    }
}


// approach 2 - bfs
class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        Map<Integer, ArrayList<Integer>> adj = new HashMap<>();
        int n = edges.length;
        for(int[] ed:edges){
            boolean[] vis = new boolean[n];
            int u = ed[0]-1;
            int v = ed[1]-1;
            if(adj.containsKey(u) && adj.containsKey(v) && bfs(adj, v, u, vis)) 
                return ed;

            adj.computeIfAbsent(u, k -> new ArrayList<>()).add(v);
            adj.computeIfAbsent(v, k -> new ArrayList<>()).add(u);
        }

        int[] res = new int[2];
        return res;
    }

    boolean bfs(Map<Integer, ArrayList<Integer>> adj, int u, int v, boolean[] vis){
        if(u == v) return true;
        vis[u] = true;
        Queue<Integer> que = new LinkedList<>();
        que.offer(u);
        while(!que.isEmpty()){
            int p = que.poll();
            vis[p] = true;
            for(int n:adj.get(p)){
                if(!vis[n]){
                    if(n == v) return true;
                    que.offer(n);
                }
            }
        }
        return false;
    }
}


// approach 3 - dsu
