class Solution {
    public boolean canBeValid(String s, String l) {
        Stack<Integer> open = new Stack<>();
        Stack<Integer> oc = new Stack<>();

        // if odd then no
        if(s.length()%2 == 1) return false;
        
        // push,pop accordingly in both stack
        for(int i=0; i<s.length(); i++){
            if(l.charAt(i) == '0') oc.push(i);
            else {
                if(s.charAt(i) == '(') open.push(i);
                else if(s.charAt(i) == ')') {
                    if(!open.isEmpty()) open.pop();
                    else if(!oc.isEmpty()) oc.pop();
                    else return false;
                }
            }
        }

        // pop in stack
        while(!open.isEmpty() && !oc.isEmpty() && open.peek()<oc.peek()){
            open.pop();
            oc.pop();
        }

        // if open empty then will be true;
        return open.isEmpty();
    }
}

class Solution {
    public boolean canBeValid(String s, String l) {
        int o = 0;
        int c = 0;
        int n = s.length();
        if(n % 2 == 1) return false;
        for(int i=0; i<n; i++){
            if(l.charAt(i) == '0') o++;
            else if(s.charAt(i) == '(') o++;
            else o--;
            if(o<0) return false;
        }
        
        for(int i=n-1; i>=0; i--){
            if(l.charAt(i) == '0') c++;
            else if(s.charAt(i) == ')') c++;
            else c--;
            if(c<0) return false;
        }

        return true;
    }
}
