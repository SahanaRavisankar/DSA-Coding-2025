class Solution {
    public boolean isSubsequence(String s, String t) {
        int j=0;
        for(int i=0; i<t.length(); i++){
            if(j<s.length() && t.charAt(i) == s.charAt(j)) j++;
        }
        return j==s.length();
    }
}

class Solution {
    public boolean isSubsequence(String s, String t) {
        int i=0, j=0;
        int m=s.length();
        int n=t.length();
        while(i<n && j<m){
            if(t.charAt(i) == s.charAt(j)) j++;
            i++;
        }
        return j==m;
    }
}


class Solution {
    public boolean isSubsequence(String s, String t) {
        int m = s.length();
        int n = t.length();
        Map<Character, ArrayList<Integer>> map = new HashMap<>();
        for(int i=0; i<n; i++){
            if(!map.containsKey(t.charAt(i))) map.put(t.charAt(i), new ArrayList<Integer>());
            map.get(t.charAt(i)).add(i);
        }
        
        int prev = -1;
        for(int i=0; i<m; i++){
            if(!map.containsKey(s.charAt(i))) return false;
            ArrayList<Integer> index = map.get(s.charAt(i));
            int it = upperBound(index, prev);
            if(it == index.size()) return false;
            prev = index.get(it);
        }
        return true;
    }

    int upperBound(ArrayList<Integer> arr, int num){
        int ind = Collections.binarySearch(arr, num);
        if(ind<0) return -(ind + 1);
        while(ind<arr.size() && arr.get(ind)==num) ind++;
        return ind;
    }
}
