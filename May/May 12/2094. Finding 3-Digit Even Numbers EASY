// approach 1
class Solution {
    public int[] findEvenNumbers(int[] digits) {
        int n = digits.length;
        Set<Integer> list = new HashSet<>();
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                for(int k = 0; k < n; k++) {
                    if(i != j && j != k && k != i) {
                        int num = digits[i] * 100 + digits[j] * 10 + digits[k];
                        if(num >= 100 && num % 2 == 0) {
                            list.add(num);
                        }
                    }
                }
            }
        }

        int[] res = new int[list.size()];
        int idx = 0;

        for(int i : list) {
            res[idx] = i;
            idx++;
        }
        
        Arrays.sort(res);

        return res;
    }
}


// approach 2
class Solution {
    public int[] findEvenNumbers(int[] digits) {
        int n = digits.length;
        ArrayList<Integer> list = new ArrayList<>();
        int[] freq = new int[10];
        for(int i : digits)
            freq[i]++;

        for(int i = 1; i <= 9; i++) {
            if(freq[i] == 0)
                continue;
            
            freq[i]--;

            for(int j = 0; j <= 9; j++) {
                if(freq[j] == 0)
                    continue;

                freq[j]--;

                for(int k = 0; k <= 8; k += 2) {
                    if(freq[k] == 0)
                        continue;
                    
                    freq[k]--;
                    int num = 100 * i + 10 * j + k;
                    list.add(num);
                    freq[k]++;
                }

                freq[j]++;
            }

            freq[i]++;
        }

        int[] res = list.stream().mapToInt(i -> i).toArray();
        return res;
    }
}
