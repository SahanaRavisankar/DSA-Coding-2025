// approach 1
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        dfs(res, root);
        return res;
    }
    private void dfs(List<Integer>res, TreeNode root){
        if(root!=null){
            if(root.left!=null) dfs(res, root.left);
            res.add(root.val);
            if(root.right!=null) dfs(res, root.right);
        }
    }
}


// approach 2
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        // Morris Traversal
        List<Integer> res = new ArrayList<>();
        TreeNode curr = root;

        while (curr != null) {
            if (curr.left == null) {
                res.add(curr.val);
                curr = curr.right;
            } else {
                TreeNode leftchild = curr.left;

                while (leftchild.right != null) {
                    leftchild = leftchild.right;
                }

                leftchild.right = curr;

                TreeNode temp = curr;
                curr = curr.left;
                temp.left = null;
            }
        }

        return res;
    }
}
