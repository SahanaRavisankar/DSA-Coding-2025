class Solution {
    public int maxTaskAssign(int[] tasks, int[] workers, int pills, int strength) {
        Arrays.sort(tasks);
        Arrays.sort(workers);

        int n = tasks.length;
        int m = workers.length;
        
        int l = 1, r = Math.min(m, n);
        int res = 0;

        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(check(tasks, workers, pills, strength, mid, m)) {
                res = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }

        return res;
    }

    boolean check(int[] tasks, int[] workers, int p, int strength, int mid, int m) {
        TreeMap<Integer, Integer> ws = new TreeMap<>();
        int pills = p;
        for(int i = m - mid; i < m; i++) {
            ws.put(workers[i], ws.getOrDefault(workers[i], 0) + 1);
        }

        for(int i = mid - 1; i >= 0; i--) {
            Integer key = ws.lastKey();
            if(tasks[i] <= key) {
                ws.put(key, ws.get(key) - 1);
                if(ws.get(key) == 0) {
                    ws.remove(key);
                }
            } else {
                if(pills == 0) return false;
                key = ws.ceilingKey(tasks[i] - strength);
                if(key == null) return false;
                ws.put(key, ws.get(key) - 1);
                if(ws.get(key) == 0) {
                    ws.remove(key);
                }
                pills--;
            }
        }

        return true;
    }
}
