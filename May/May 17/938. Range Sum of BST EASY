// approach 1
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        int[] sum = new int[1];
        sum[0] = 0;
        solve(root, sum, low, high);
        return sum[0];
    }

    void solve(TreeNode root, int[] sum, int low, int high) {
        if(root == null)
            return;

        if(root.val >= low && root.val <= high)
            sum[0] += root.val;

        solve(root.left, sum, low, high);
        solve(root.right, sum, low, high);
    }
}


// approach 2 using property of bst
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        int[] sum = new int[1];
        sum[0] = 0;
        solve(root, sum, low, high);
        return sum[0];
    }

    void solve(TreeNode root, int[] sum, int low, int high) {
        if(root == null)
            return;

        if(root.val >= low && root.val <= high)
            sum[0] += root.val;

        if(root.val >= low)
            solve(root.left, sum, low, high);
        if(root.val <= high)
            solve(root.right, sum, low, high);
    }
}


// approach 3
class Solution {
    public int rangeSumBST(TreeNode root, int low, int high) {
        if(root == null)
            return 0;

        if(low <= root.val && root.val <= high) {
            return root.val + rangeSumBST(root.left, low, high) + rangeSumBST(root.right, low, high);
        } else if(root.val < low) {
            return rangeSumBST(root.right, low, high);
        } else {
            return rangeSumBST(root.left, low, high);
        }
    }
}
