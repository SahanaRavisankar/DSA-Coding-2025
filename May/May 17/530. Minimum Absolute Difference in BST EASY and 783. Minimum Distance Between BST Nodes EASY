// approach 1
class Solution {
    public int getMinimumDifference(TreeNode root) {
        ArrayList<Integer> list = new ArrayList<>();
        inorder(root, list);

        int min = Integer.MAX_VALUE;
        for(int i = 1; i < list.size(); i++) {
            min = Math.min(Math.abs(list.get(i) - list.get(i - 1)), min);
        }
        
        return min;
    }

    void inorder(TreeNode root, ArrayList<Integer> list) {
        if(root == null)
            return;

        inorder(root.left, list);
        list.add(root.val);
        inorder(root.right, list);
    }
}


// approach 2
class Solution {
    public int getMinimumDifference(TreeNode root) {
        int[] min = {Integer.MAX_VALUE};
        int[] prev = {Integer.MAX_VALUE};

        inorder(root, min, prev);

        return min[0];
    }

    void inorder(TreeNode root, int[] min, int[] prev) {
        if(root == null)
            return;

        inorder(root.left, min, prev);

        if(prev[0] != Integer.MAX_VALUE) 
            min[0] = Math.min(min[0], Math.abs(prev[0] - root.val));
        prev[0] = root.val;
        
        inorder(root.right, min, prev);
    }
}
