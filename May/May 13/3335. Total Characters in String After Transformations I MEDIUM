// approach 1
class Solution {
    int mod = (int) 1e9 + 7;
    public int lengthAfterTransformations(String s, int t) {
        StringBuilder str = new StringBuilder();
        str.append(s);

        int res = 0;
        for(int i = 0; i < t; i++) {
            StringBuilder temp = new StringBuilder();
            for(int j = 0; j < str.length(); j++) {
                if(str.charAt(j) != 'z') {
                    temp.append((char) (str.charAt(j) + 1));
                } else temp.append("ab");
            }
            str = temp;

            res = str.length() % mod;
        }

        return res;
    }
}


// approach 2
class Solution {
    int mod = (int) 1e9 + 7;
    public int lengthAfterTransformations(String s, int t) {
        Map<Character, Integer> map = new HashMap<>();

        for (char ch : s.toCharArray()) 
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        

        for (int i = 0; i < t; i++) {
            Map<Character, Integer> temp = new HashMap<>();
            for (Map.Entry<Character, Integer> entry : map.entrySet()) {
                char ch = entry.getKey();
                int freq = entry.getValue();

                if(ch != 'z') {
                    temp.put((char) (ch + 1), (temp.getOrDefault((char) (ch + 1), 0) + freq) % mod);
                } else {
                    temp.put('a', (temp.getOrDefault('a', 0) + freq) % mod);
                    temp.put('b', (temp.getOrDefault('b', 0) + freq) % mod);
                }
            }
            map = temp;
        }

        int res = 0;
        for(int i : map.values()) {
            res = (res + i) % mod;
        }

        return res;
    }
}


// approach 3
class Solution {
    int mod = (int) 1e9 + 7;
    public int lengthAfterTransformations(String s, int t) {
        int[] map = new int[26];

        for (char ch : s.toCharArray()) 
            map[ch - 'a']++;
        

        for (int i = 0; i < t; i++) {
            int[] temp = new int[26];
            for (int cnt = 0; cnt < 26; cnt++) {
                if(map[cnt] == 0) continue;

                int freq = map[cnt];

                if(cnt != 25) {
                    temp[cnt + 1] = (temp[cnt + 1] + freq) % mod;
                } else {
                    temp[0] = (temp[0] + freq) % mod;
                    temp[1] = (temp[1] + freq) % mod;
                }
            }
            map = temp;
        }

        int res = 0;
        for(int i : map) {
            res = (res + i) % mod;
        }

        return res;
    }
}
