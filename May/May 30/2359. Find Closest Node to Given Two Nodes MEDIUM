// approach 1
class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        int[] dist1 = new int[n];
        int[] dist2 = new int[n];
        Arrays.fill(dist1, Integer.MAX_VALUE);
        Arrays.fill(dist2, Integer.MAX_VALUE);

        dist1 = find(dist1, edges, node1, n);
        dist2 = find(dist2, edges, node2, n);
        int min = Integer.MAX_VALUE;

        for(int i = 0; i < n; i++) {
            dist1[i] = Math.max(dist1[i], dist2[i]);
            min = Math.min(dist1[i], min);
        }

        if(min == Integer.MAX_VALUE)
            return -1;

        for(int i = 0; i < n; i++) {
            if(dist1[i] == min)
                return i;
        }

        return -1;
    }

    int[] find(int[] dist, int[] edges, int idx, int n) {
        int d = 0;
        boolean[] vis = new boolean[n];
        Arrays.fill(vis, false);
        while(idx != -1 && !vis[idx]){
            dist[idx] = d;
            d += 1;
            vis[idx] = true;
            idx = edges[idx];
        }
        return dist;
    }
}


// approach 2
class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        
        int[] dist1 = new int[n];
        int[] dist2 = new int[n];
        Arrays.fill(dist1, Integer.MAX_VALUE);
        Arrays.fill(dist2, Integer.MAX_VALUE);
        dist1[node1] = 0;
        dist2[node2] = 0;
        
        boolean[] vis1 = new boolean[n];
        boolean[] vis2 = new boolean[n];

        bfs(dist1, edges, node1, vis1);
        bfs(dist2, edges, node2, vis2);
        int min = Integer.MAX_VALUE;

        for(int i = 0; i < n; i++) {
            dist1[i] = Math.max(dist1[i], dist2[i]);
            min = Math.min(dist1[i], min);
        }

        if(min == Integer.MAX_VALUE)
            return -1;

        for(int i = 0; i < n; i++) {
            if(dist1[i] == min)
                return i;
        }

        return -1;
    }

    void bfs(int[] dist, int[] edges, int idx, boolean[] vis) {
        Queue<Integer> que = new LinkedList<>();
        que.offer(idx);
        vis[idx] = true;

        while(!que.isEmpty()) {
            idx = que.poll();
            int v = edges[idx];
            if(v != -1 && !vis[v]) {
                vis[v] = true;
                dist[v] = 1 + dist[idx];
                que.offer(v);
            }
        }
    }
}


// approach 3
class Solution {
    public int closestMeetingNode(int[] edges, int node1, int node2) {
        int n = edges.length;
        
        int[] dist1 = new int[n];
        int[] dist2 = new int[n];
        Arrays.fill(dist1, Integer.MAX_VALUE);
        Arrays.fill(dist2, Integer.MAX_VALUE);
        dist1[node1] = 0;
        dist2[node2] = 0;
        
        boolean[] vis1 = new boolean[n];
        boolean[] vis2 = new boolean[n];

        dfs(dist1, edges, node1, vis1);
        dfs(dist2, edges, node2, vis2);
        int min = Integer.MAX_VALUE;

        for(int i = 0; i < n; i++) {
            dist1[i] = Math.max(dist1[i], dist2[i]);
            min = Math.min(dist1[i], min);
        }

        if(min == Integer.MAX_VALUE)
            return -1;

        for(int i = 0; i < n; i++) {
            if(dist1[i] == min)
                return i;
        }

        return -1;
    }

    void dfs(int[] dist, int[] edges, int idx, boolean[] vis) {
        vis[idx] = true;
        int v = edges[idx];
        if(v != -1 && !vis[v]) {
            vis[v] = true;
            dist[v] = 1 + dist[idx];
            dfs(dist, edges, v, vis);
        }
    }
}
