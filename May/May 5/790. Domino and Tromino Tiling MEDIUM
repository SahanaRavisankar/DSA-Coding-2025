// approach 1
class Solution {
    int mod = 1000000007;
    public int numTilings(int n) {
        // dp[i] = dp[i - 3] + 2dp[i - 1];
        int[] dp = new int[n + 1];
        Arrays.fill(dp, -1);

        return solve(n, dp);
    }

    int solve(int n, int[] dp) {
        if(n == 0 || n == 1 || n == 2) return n;
        if(n == 3) return 5;
        if(dp[n] != -1) return dp[n];
        return dp[n] = (solve(n - 3, dp) % mod + (solve(n - 1, dp) * 2) % mod) % mod;
    }
}


// approach 2
class Solution {
    int mod = 1000000007;
    public int numTilings(int n) {
        // dp[i] = dp[i - 3] + 2dp[i - 1];
        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        if(n > 1) dp[2] = 2;
        if(n > 2) dp[3] = 5;

        for(int i = 4; i <= n; i++) {
            int temp = (dp[i - 3] + (2 * dp[i - 1]) % mod) % mod;
            dp[i] = temp;
        }

        return dp[n];
    }
}
