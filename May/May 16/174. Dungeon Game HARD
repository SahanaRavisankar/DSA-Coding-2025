// approach 1
class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        int m = dungeon.length; // row
        int n = dungeon[0].length; // col

        for(int i = 1; i <= 40_000_000; i++) {
            if(canSurvive(i, 0, 0, dungeon, m, n))
                return i;
        }

        return -1;
    }

    boolean canSurvive(int mid, int i, int j, int[][] grid, int m, int n) {
        if(i >= m || j >= n)
            return false;


        if(mid + grid[i][j] <= 0)
            return false;

        if(i == m - 1 && j == n - 1)
            return mid >= 1;

        boolean right = canSurvive(mid + grid[i][j], i, j + 1, grid, m, n);
        boolean down = canSurvive(mid + grid[i][j], i + 1, j, grid, m, n);

        return right || down;
    }
}


// approach 2
class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        int m = dungeon.length; // row
        int n = dungeon[0].length; // col
        int l = 1;
        int r = (int) (4 * 1e7); // 200 * 200 * 1000 = 4 * 10000000
        int res = (int) (4 * 1e7);

        while(l <= r) {
            int mid = l + (r - l) / 2;
            if(canSurvive(mid, 0, 0, dungeon, m, n)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return res;
    }

    boolean canSurvive(int mid, int i, int j, int[][] grid, int m, int n) {
        if(i >= m || j >= n)
            return false;


        if(mid + grid[i][j] <= 0)
            return false;

        if(i == m - 1 && j == n - 1)
            return mid >= 1;
            
        boolean right = canSurvive(mid + grid[i][j], i, j + 1, grid, m, n);
        boolean down = canSurvive(mid + grid[i][j], i + 1, j, grid, m, n);

        return right || down;
    }
}


// approach 3
class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        int m = dungeon.length; // row
        int n = dungeon[0].length; // col
        int l = 1;
        int r = (int) (4 * 1e7); // 200 * 200 * 1000 = 4 * 10000000
        int res = (int) (4 * 1e7);

        while(l <= r) {
            int mid = l + (r - l) / 2;
            Map<String, Boolean> dp = new HashMap<>();
            if(canSurvive(mid, 0, 0, dungeon, m, n, dp)) {
                res = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }

        return res;
    }

    boolean canSurvive(int mid, int i, int j, int[][] grid, int m, int n, Map<String, Boolean> dp) {
        if(i >= m || j >= n)
            return false;

        if(mid + grid[i][j] <= 0)
            return false;

        if(i == m - 1 && j == n - 1)
            return mid >= 1;

        String key = i + "_" + j +"_" + mid;

        if(dp.containsKey(key))
            return dp.get(key);
            
        boolean right = canSurvive(mid + grid[i][j], i, j + 1, grid, m, n, dp);
        boolean down = canSurvive(mid + grid[i][j], i + 1, j, grid, m, n, dp);

        dp.put(key, right || down);
        return right || down;
    }
}


// approach 4
class Solution {
    public int calculateMinimumHP(int[][] dungeon) {
        int m = dungeon.length; // row
        int n = dungeon[0].length; // col
        int[][] dp = new int[m][n];
        for(int[] t : dp)
            Arrays.fill(t, -1);

        return solve(dungeon, 0, 0, m, n, dp);
    }

    int solve(int[][] grid, int i, int j, int m, int n, int[][] dp) {
        if(i >= m || j >= n)
            return Integer.MAX_VALUE;
        
        if(dp[i][j] != -1)
            return dp[i][j];

        if(i == m - 1 && j == n - 1) {
            if(grid[i][j] <= 0)
                return Math.abs(grid[i][j]) + 1;
            return 1;
        }

        int right = solve(grid, i, j + 1, m, n, dp);
        int down = solve(grid, i + 1, j, m, n, dp);

        int res = Math.min(right, down) - grid[i][j];

        return dp[i][j] = (res <= 0) ? 1 : res;
    }
}


// approach 5
class Solution {
    public int calculateMinimumHP(int[][] grid) {
        int m = grid.length; // row
        int n = grid[0].length; // col
        int[][] dp = new int[m][n];
        
        for(int i = m - 1; i >= 0; i--) {
            for(int j = n - 1; j >= 0; j--) {
                if(i == m - 1 && j == n - 1) {
                    dp[i][j] = (grid[i][j] <= 0) ? Math.abs(grid[i][j]) + 1 : 1;
                } else {
                    int right = (j + 1 == n) ? Integer.MAX_VALUE : dp[i][j + 1];
                    int down = (i + 1 == m) ? Integer.MAX_VALUE : dp[i + 1][j];
                    int res = Math.min(right, down) - grid[i][j];
                    dp[i][j] = (res <= 0) ? 1 : res;
                }
            }
        }

        return dp[0][0];
    }
}
