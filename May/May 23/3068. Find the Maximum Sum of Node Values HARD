// approach 1
class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        long sum = 0;
        int count = 0;
        int minloss = Integer.MAX_VALUE;

        for (int num : nums) {
            int temp = num ^ k;

            if (temp > num) {
                count++;
                sum += temp;
            } else {
                sum += num;
            }

            minloss = Math.min(minloss, Math.abs(num - temp));
        }

        if (count % 2 == 0)
            return sum;

        return sum - minloss;
    }
}


// approach 2
class Solution {
    public long maximumValueSum(int[] nums, int k, int[][] edges) {
        long sum = 0;
        int count = 0;
        List<Integer> list = new ArrayList<>();
        int idx = 0;

        for (int num : nums) {
            int temp = num ^ k;
            list.add(temp - num);
            sum += num;
        }

        list.sort(Collections.reverseOrder());
        for(int i = 0; i + 1 < nums.length; i += 2) {
            if (list.get(i) + list.get(i + 1) > 0)
                sum += list.get(i) + list.get(i + 1);
            else break;
        }

        return sum;
    }
}
